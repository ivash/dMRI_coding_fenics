// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __FORMS_H
#define __FORMS_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class forms_finite_element_0: public ufc::finite_element
{
public:

  forms_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~forms_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new forms_finite_element_0();
  }

};


class forms_finite_element_1: public ufc::finite_element
{
public:

  forms_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~forms_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_finite_element_0();
    case 1:
        return new forms_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new forms_finite_element_1();
  }

};


class forms_finite_element_2: public ufc::finite_element
{
public:

  forms_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~forms_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Nedelec 1st kind H(curl)', triangle, 3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Nedelec 1st kind H(curl)";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[2][10] =
        { { 0.0, 0.0, 0.0, -0.169533172561123, 0.08417937871268431, -0.11664236870396053, 0.0, -0.14682003422210357, 0.07290148043997556, -0.10101525445522067 },
          { 0.0, 0.0, 0.0, 0.3216783274236692, -0.13468700594029492, 0.09720197391996728, 0.26057971086461396, -0.12987926104263023, 0.09768798378956733, -0.06313453403451313 } };
    static const double coefficients1[2][10] =
        { { 0.0, 0.0, 0.0, 0.07824607964359483, -0.16835875742536843, 0.34992710611188194, 0.0, 0.06776309271789374, -0.14580296087995118, 0.3030457633656624 },
          { 0.0, 0.0, 0.0, -0.16518616813647954, 0.23570226039551606, -0.2721655269759086, -0.1202675588605915, 0.1468200342221039, -0.22453655975512485, 0.176776695296637 } };
    static const double coefficients2[2][10] =
        { { 0.0, 0.0, 0.0, -0.03912303982179736, -0.08417937871268402, -0.3499271061118822, 0.0, -0.033881546358946836, -0.07290148043997526, -0.30304576336566275 },
          { 0.0, 0.0, 0.0, 0.060858061945018964, 0.0, 0.2138443426239284, 0.060133779430295756, 0.039528470752104534, 0.11226827987756255, -0.13889597487592928 } };
    static const double coefficients3[2][10] =
        { { 0.0, 0.0, 0.0, 0.16953317256112319, 0.08417937871268408, 0.116642368703961, 0.0, 0.14682003422210346, 0.07290148043997545, 0.10101525445522103 },
          { 0.0, 0.0, 0.0, 0.49121149998479197, 0.21886638465297908, 0.21384434262392807, -0.26057971086461335, 0.016940773179473442, -0.024786503349591843, 0.03788072042070804 } };
    static const double coefficients4[2][10] =
        { { 0.0, 0.0, 0.0, -0.07824607964359516, -0.16835875742536838, -0.34992710611188255, 0.0, -0.0677630927178938, -0.14580296087995082, -0.3030457633656628 },
          { 0.0, 0.0, 0.0, -0.24343224778007333, -0.4040610178208844, -0.622092633087791, 0.12026755886059094, 0.07905694150420949, 0.0787335988751737, -0.1262690680690266 } };
    static const double coefficients5[2][10] =
        { { 0.0, 0.0, 0.0, 0.039123039821797226, -0.08417937871268417, 0.349927106111882, 0.0, 0.033881546358946774, -0.07290148043997562, 0.30304576336566263 },
          { 0.0, 0.0, 0.0, 0.09998110176681546, -0.08417937871268401, 0.5637714487358105, -0.06013377943029581, 0.07341001711105193, -0.185169760317538, 0.16414978848973447 } };
    static const double coefficients6[2][10] =
        { { 0.0, 0.0, 0.0, 0.38253638936868756, 0.30304576336566336, 0.311046316543896, 0.0, -0.0903507902905252, -0.1458029608799508, -0.20203050891044214 },
          { 0.0, 0.0, 0.0, 0.16953317256112296, 0.08417937871268417, 0.11664236870396144, 0.16035674514745463, 0.06776309271789385, 0.03207665139358955, -0.07576144084141614 } };
    static const double coefficients7[2][10] =
        { { 0.0, 0.0, 0.0, -0.7650727787373749, 0.0, -0.1555231582719481, 0.0, 0.18070158058105043, 0.0, 0.10101525445522111 },
          { 0.0, 0.0, 0.0, -0.38253638936868756, 0.06734350297014782, -0.07776157913597408, -0.3207134902949091, 0.09035079029052545, -0.06415330278717885, 0.05050762722761068 } };
    static const double coefficients8[2][10] =
        { { 0.0, 0.0, 0.0, 0.3825363893686874, -0.30304576336566347, 0.31104631654389625, 0.0, -0.09035079029052505, 0.14580296087995112, -0.20203050891044183 },
          { 0.0, 0.0, 0.0, 0.21300321680756495, -0.2188663846529793, 0.19440394783993478, 0.16035674514745474, -0.15811388300841941, 0.17787961227354057, -0.1262690680690265 } };
    static const double coefficients9[2][10] =
        { { 4.0, 0.0, 0.0, -0.36885555678165965, -0.4761904761904769, -1.6495721976846462, 0.0, -0.3194382824999711, -0.4123930494211607, 0.5714285714285702 },
          { 0.0, 0.0, 0.0, 0.6147592613027621, 0.4761904761904755, -0.5498573992282145, 0.5669467095138395, 0.15971914124998537, -0.45363235436327715, 0.3571428571428575 } };
    static const double coefficients10[2][10] =
        { { 0.0, 3.999999999999999, 0.0, -0.6776309271789408, 1.8079567149113955, 0.0, 0.0, -0.5868455973269656, -1.2626906806902616, 0.0 },
          { 0.0, 0.0, 0.0, 1.0540925533894556, 1.1664236870396083, -0.3367175148507337, 1.0415476122441185, 0.6846531968814592, -0.5808377131175197, 0.2187044413199252 } };
    static const double coefficients11[2][10] =
        { { 0.0, 0.0, 3.999999999999999, 0.13041013273932786, -0.8417937871268422, 0.933138949631689, 0.0, 0.11293848786315774, -0.7290148043997541, -2.020305089104419 },
          { 0.0, 0.0, 0.0, -0.34776035397153027, 0.3367175148507375, 1.3608276348795452, -0.20044593143431627, 0.6211616832473591, 0.5977921396078006, -0.8838834764831867 } };
    static const double coefficients12[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 0.9523809523809516, 0.0, 0.0, 0.0, 0.8247860988423222, 0.0 },
          { 4.0, 0.0, 0.0, -1.5983740793871863, 0.4761904761904751, -0.549857399228216, 0.0, -0.6388765649999417, 0.4123930494211617, -0.14285714285714288 } };
    static const double coefficients13[2][10] =
        { { 0.0, 0.0, 0.0, 1.3552618543578774, 0.0, 0.0, 0.0, 1.1736911946539288, 0.0, 0.0 },
          { 0.0, 3.9999999999999973, 0.0, 0.67763092717894, -0.5248906591678224, 0.0, -2.0830952244882384, 0.5868455973269638, -0.10101525445522189, 0.0 } };
    static const double coefficients14[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 1.6835875742536817, 0.0, 0.0, 0.0, 1.4580296087995097, 0.0 },
          { 0.0, 0.0, 3.9999999999999996, 0.8259308406823954, 0.8417937871268406, -1.788516320127401, 0.0, -1.1293848786315657, 0.7290148043997552, -0.2525381361380518 } };
    for (std::size_t k = 0; k < num_points * 15 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + c] += coefficients0[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 + c] += coefficients1[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 2 + c] += coefficients2[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 3 + c] += coefficients3[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 4 + c] += coefficients4[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 5 + c] += coefficients5[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 6 + c] += coefficients6[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 7 + c] += coefficients7[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 8 + c] += coefficients8[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 9 + c] += coefficients9[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 10 + c] += coefficients10[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 11 + c] += coefficients11[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 12 + c] += coefficients12[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 13 + c] += coefficients13[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 14 + c] += coefficients14[c][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives * 2, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129193, 0.0, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
            { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
            { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[2][10] =
        { { 0.0, 0.0, 0.0, -0.169533172561123, 0.08417937871268431, -0.11664236870396053, 0.0, -0.14682003422210357, 0.07290148043997556, -0.10101525445522067 },
          { 0.0, 0.0, 0.0, 0.3216783274236692, -0.13468700594029492, 0.09720197391996728, 0.26057971086461396, -0.12987926104263023, 0.09768798378956733, -0.06313453403451313 } };
    static const double coefficients1[2][10] =
        { { 0.0, 0.0, 0.0, 0.07824607964359483, -0.16835875742536843, 0.34992710611188194, 0.0, 0.06776309271789374, -0.14580296087995118, 0.3030457633656624 },
          { 0.0, 0.0, 0.0, -0.16518616813647954, 0.23570226039551606, -0.2721655269759086, -0.1202675588605915, 0.1468200342221039, -0.22453655975512485, 0.176776695296637 } };
    static const double coefficients2[2][10] =
        { { 0.0, 0.0, 0.0, -0.03912303982179736, -0.08417937871268402, -0.3499271061118822, 0.0, -0.033881546358946836, -0.07290148043997526, -0.30304576336566275 },
          { 0.0, 0.0, 0.0, 0.060858061945018964, 0.0, 0.2138443426239284, 0.060133779430295756, 0.039528470752104534, 0.11226827987756255, -0.13889597487592928 } };
    static const double coefficients3[2][10] =
        { { 0.0, 0.0, 0.0, 0.16953317256112319, 0.08417937871268408, 0.116642368703961, 0.0, 0.14682003422210346, 0.07290148043997545, 0.10101525445522103 },
          { 0.0, 0.0, 0.0, 0.49121149998479197, 0.21886638465297908, 0.21384434262392807, -0.26057971086461335, 0.016940773179473442, -0.024786503349591843, 0.03788072042070804 } };
    static const double coefficients4[2][10] =
        { { 0.0, 0.0, 0.0, -0.07824607964359516, -0.16835875742536838, -0.34992710611188255, 0.0, -0.0677630927178938, -0.14580296087995082, -0.3030457633656628 },
          { 0.0, 0.0, 0.0, -0.24343224778007333, -0.4040610178208844, -0.622092633087791, 0.12026755886059094, 0.07905694150420949, 0.0787335988751737, -0.1262690680690266 } };
    static const double coefficients5[2][10] =
        { { 0.0, 0.0, 0.0, 0.039123039821797226, -0.08417937871268417, 0.349927106111882, 0.0, 0.033881546358946774, -0.07290148043997562, 0.30304576336566263 },
          { 0.0, 0.0, 0.0, 0.09998110176681546, -0.08417937871268401, 0.5637714487358105, -0.06013377943029581, 0.07341001711105193, -0.185169760317538, 0.16414978848973447 } };
    static const double coefficients6[2][10] =
        { { 0.0, 0.0, 0.0, 0.38253638936868756, 0.30304576336566336, 0.311046316543896, 0.0, -0.0903507902905252, -0.1458029608799508, -0.20203050891044214 },
          { 0.0, 0.0, 0.0, 0.16953317256112296, 0.08417937871268417, 0.11664236870396144, 0.16035674514745463, 0.06776309271789385, 0.03207665139358955, -0.07576144084141614 } };
    static const double coefficients7[2][10] =
        { { 0.0, 0.0, 0.0, -0.7650727787373749, 0.0, -0.1555231582719481, 0.0, 0.18070158058105043, 0.0, 0.10101525445522111 },
          { 0.0, 0.0, 0.0, -0.38253638936868756, 0.06734350297014782, -0.07776157913597408, -0.3207134902949091, 0.09035079029052545, -0.06415330278717885, 0.05050762722761068 } };
    static const double coefficients8[2][10] =
        { { 0.0, 0.0, 0.0, 0.3825363893686874, -0.30304576336566347, 0.31104631654389625, 0.0, -0.09035079029052505, 0.14580296087995112, -0.20203050891044183 },
          { 0.0, 0.0, 0.0, 0.21300321680756495, -0.2188663846529793, 0.19440394783993478, 0.16035674514745474, -0.15811388300841941, 0.17787961227354057, -0.1262690680690265 } };
    static const double coefficients9[2][10] =
        { { 4.0, 0.0, 0.0, -0.36885555678165965, -0.4761904761904769, -1.6495721976846462, 0.0, -0.3194382824999711, -0.4123930494211607, 0.5714285714285702 },
          { 0.0, 0.0, 0.0, 0.6147592613027621, 0.4761904761904755, -0.5498573992282145, 0.5669467095138395, 0.15971914124998537, -0.45363235436327715, 0.3571428571428575 } };
    static const double coefficients10[2][10] =
        { { 0.0, 3.999999999999999, 0.0, -0.6776309271789408, 1.8079567149113955, 0.0, 0.0, -0.5868455973269656, -1.2626906806902616, 0.0 },
          { 0.0, 0.0, 0.0, 1.0540925533894556, 1.1664236870396083, -0.3367175148507337, 1.0415476122441185, 0.6846531968814592, -0.5808377131175197, 0.2187044413199252 } };
    static const double coefficients11[2][10] =
        { { 0.0, 0.0, 3.999999999999999, 0.13041013273932786, -0.8417937871268422, 0.933138949631689, 0.0, 0.11293848786315774, -0.7290148043997541, -2.020305089104419 },
          { 0.0, 0.0, 0.0, -0.34776035397153027, 0.3367175148507375, 1.3608276348795452, -0.20044593143431627, 0.6211616832473591, 0.5977921396078006, -0.8838834764831867 } };
    static const double coefficients12[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 0.9523809523809516, 0.0, 0.0, 0.0, 0.8247860988423222, 0.0 },
          { 4.0, 0.0, 0.0, -1.5983740793871863, 0.4761904761904751, -0.549857399228216, 0.0, -0.6388765649999417, 0.4123930494211617, -0.14285714285714288 } };
    static const double coefficients13[2][10] =
        { { 0.0, 0.0, 0.0, 1.3552618543578774, 0.0, 0.0, 0.0, 1.1736911946539288, 0.0, 0.0 },
          { 0.0, 3.9999999999999973, 0.0, 0.67763092717894, -0.5248906591678224, 0.0, -2.0830952244882384, 0.5868455973269638, -0.10101525445522189, 0.0 } };
    static const double coefficients14[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 1.6835875742536817, 0.0, 0.0, 0.0, 1.4580296087995097, 0.0 },
          { 0.0, 0.0, 3.9999999999999996, 0.8259308406823954, 0.8417937871268406, -1.788516320127401, 0.0, -1.1293848786315657, 0.7290148043997552, -0.2525381361380518 } };
    const std::size_t reference_offset[15] = {};
    const std::size_t num_components[15] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[16] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients0[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients0[1][s] * aux[s];
                    }
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients1[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients1[1][s] * aux[s];
                    }
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients2[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients2[1][s] * aux[s];
                    }
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients3[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients3[1][s] * aux[s];
                    }
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients4[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients4[1][s] * aux[s];
                    }
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients5[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients5[1][s] * aux[s];
                    }
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients6[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients6[1][s] * aux[s];
                    }
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients7[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients7[1][s] * aux[s];
                    }
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients8[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients8[1][s] * aux[s];
                    }
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients9[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients9[1][s] * aux[s];
                    }
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients10[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients10[1][s] * aux[s];
                    }
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients11[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients11[1][s] * aux[s];
                    }
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients12[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients12[1][s] * aux[s];
                    }
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients13[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients13[1][s] * aux[s];
                    }
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients14[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients14[1][s] * aux[s];
                    }
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[15] = {};
    const std::size_t physical_offsets[15] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[8][8];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 2; ++i)
                {
                    // Using covariant Piola transform to map values back to the physical element.
                    const double mapped_value = K[2 * 2 * ip + i] * reference_values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]] + K[2 * 2 * ip + 2 + i] * reference_values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + (reference_offsets[d] + 1)];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[30];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[30];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[8][8] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.169533172561123, 0.08417937871268431, -0.11664236870396053, 0.0, -0.14682003422210357, 0.07290148043997556, -0.10101525445522067 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.3216783274236692, -0.13468700594029492, 0.09720197391996728, 0.26057971086461396, -0.12987926104263023, 0.09768798378956733, -0.06313453403451313 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.07824607964359483, -0.16835875742536843, 0.34992710611188194, 0.0, 0.06776309271789374, -0.14580296087995118, 0.3030457633656624 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.16518616813647954, 0.23570226039551606, -0.2721655269759086, -0.1202675588605915, 0.1468200342221039, -0.22453655975512485, 0.176776695296637 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.03912303982179736, -0.08417937871268402, -0.3499271061118822, 0.0, -0.033881546358946836, -0.07290148043997526, -0.30304576336566275 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.060858061945018964, 0.0, 0.2138443426239284, 0.060133779430295756, 0.039528470752104534, 0.11226827987756255, -0.13889597487592928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.16953317256112319, 0.08417937871268408, 0.116642368703961, 0.0, 0.14682003422210346, 0.07290148043997545, 0.10101525445522103 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.49121149998479197, 0.21886638465297908, 0.21384434262392807, -0.26057971086461335, 0.016940773179473442, -0.024786503349591843, 0.03788072042070804 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.07824607964359516, -0.16835875742536838, -0.34992710611188255, 0.0, -0.0677630927178938, -0.14580296087995082, -0.3030457633656628 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.24343224778007333, -0.4040610178208844, -0.622092633087791, 0.12026755886059094, 0.07905694150420949, 0.0787335988751737, -0.1262690680690266 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.039123039821797226, -0.08417937871268417, 0.349927106111882, 0.0, 0.033881546358946774, -0.07290148043997562, 0.30304576336566263 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.09998110176681546, -0.08417937871268401, 0.5637714487358105, -0.06013377943029581, 0.07341001711105193, -0.185169760317538, 0.16414978848973447 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.38253638936868756, 0.30304576336566336, 0.311046316543896, 0.0, -0.0903507902905252, -0.1458029608799508, -0.20203050891044214 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.16953317256112296, 0.08417937871268417, 0.11664236870396144, 0.16035674514745463, 0.06776309271789385, 0.03207665139358955, -0.07576144084141614 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.7650727787373749, 0.0, -0.1555231582719481, 0.0, 0.18070158058105043, 0.0, 0.10101525445522111 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.38253638936868756, 0.06734350297014782, -0.07776157913597408, -0.3207134902949091, 0.09035079029052545, -0.06415330278717885, 0.05050762722761068 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.3825363893686874, -0.30304576336566347, 0.31104631654389625, 0.0, -0.09035079029052505, 0.14580296087995112, -0.20203050891044183 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.21300321680756495, -0.2188663846529793, 0.19440394783993478, 0.16035674514745474, -0.15811388300841941, 0.17787961227354057, -0.1262690680690265 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 4.0, 0.0, 0.0, -0.36885555678165965, -0.4761904761904769, -1.6495721976846462, 0.0, -0.3194382824999711, -0.4123930494211607, 0.5714285714285702 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.6147592613027621, 0.4761904761904755, -0.5498573992282145, 0.5669467095138395, 0.15971914124998537, -0.45363235436327715, 0.3571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 10:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 3.999999999999999, 0.0, -0.6776309271789408, 1.8079567149113955, 0.0, 0.0, -0.5868455973269656, -1.2626906806902616, 0.0 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 1.0540925533894556, 1.1664236870396083, -0.3367175148507337, 1.0415476122441185, 0.6846531968814592, -0.5808377131175197, 0.2187044413199252 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 11:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 3.999999999999999, 0.13041013273932786, -0.8417937871268422, 0.933138949631689, 0.0, 0.11293848786315774, -0.7290148043997541, -2.020305089104419 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.34776035397153027, 0.3367175148507375, 1.3608276348795452, -0.20044593143431627, 0.6211616832473591, 0.5977921396078006, -0.8838834764831867 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 12:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.0, 0.9523809523809516, 0.0, 0.0, 0.0, 0.8247860988423222, 0.0 };
            static const double coefficients1[10] = { 4.0, 0.0, 0.0, -1.5983740793871863, 0.4761904761904751, -0.549857399228216, 0.0, -0.6388765649999417, 0.4123930494211617, -0.14285714285714288 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 13:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 1.3552618543578774, 0.0, 0.0, 0.0, 1.1736911946539288, 0.0, 0.0 };
            static const double coefficients1[10] = { 0.0, 3.9999999999999973, 0.0, 0.67763092717894, -0.5248906591678224, 0.0, -2.0830952244882384, 0.5868455973269638, -0.10101525445522189, 0.0 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 14:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.0, 1.6835875742536817, 0.0, 0.0, 0.0, 1.4580296087995097, 0.0 };
            static const double coefficients1[10] = { 0.0, 0.0, 3.9999999999999996, 0.8259308406823954, 0.8417937871268406, -1.788516320127401, 0.0, -1.1293848786315657, 0.7290148043997552, -0.2525381361380518 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129193, -4.296941688749565e-14, -2.9933259094191556, 13.662601021279457, 0.0, 0.6110100926607794, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.381780460041331, 0.0, 0.0, 12.521980673998824, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906177, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.2426406871192865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716227, 4.743416490252574, -0.9128709291752807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999917, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645734, 5.184592558726256, -1.4966629547095651, 6.831300510639723, -1.0583005244258294, 0.30550504633038805, 0.0, 0.0, 0.0, 0.0 },
                  { 2.236067977499826, 2.190890230020673, 2.5298221281346844, 8.082903768654772, 6.260990336999408, -1.8073922282301218, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688783, -5.091168824543146, 3.919183588453087, 0.0, 9.69948452238569, 4.200000000000004, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000026, 0.0, -2.8284271247462334, 0.0, 0.0, 12.12435565298216, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[16] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    switch (i)
    {
    case 0:
        {
            y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
        }
        break;
    case 1:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
        }
        break;
    case 2:
        {
            y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
        }
        break;
    case 3:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0] * J[1] + vals[1] * J[2 + 1];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0] * J[1] + vals[1] * J[2 + 1];
        }
        break;
    case 5:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0] * J[1] + vals[1] * J[2 + 1];
        }
        break;
    case 6:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0] * J[0] + vals[1] * J[2];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0] * J[0] + vals[1] * J[2];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0] * J[0] + vals[1] * J[2];
        }
        break;
    case 9:
        {
            result = 0.0;
            double X_9[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_9[36][1] = {};
            double W_9[36][1] =
                { { 0.004380007035333952 },
                  { 0.00821012828325171 },
                  { 0.008528136573677752 },
                  { 0.0059761382734593235 },
                  { 0.002662467899383865 },
                  { 0.0005292995210569465 },
                  { 0.009223072580491742 },
                  { 0.017288239137681006 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.011962482987098903 },
                  { 0.022423142044750127 },
                  { 0.023291672330955 },
                  { 0.016321766574367406 },
                  { 0.0072716154775874856 },
                  { 0.001445599622248223 },
                  { 0.011962482987098896 },
                  { 0.022423142044750117 },
                  { 0.023291672330954985 },
                  { 0.016321766574367395 },
                  { 0.007271615477587481 },
                  { 0.0014455996222482222 },
                  { 0.009223072580491742 },
                  { 0.01728823913768101 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.004380007035333964 },
                  { 0.008210128283251733 },
                  { 0.008528136573677774 },
                  { 0.005976138273459339 },
                  { 0.0026624678993838725 },
                  { 0.000529299521056948 } };
            double copy_9[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_9[r][0] - X_9[r][1];
                const double w1 = X_9[r][0];
                const double w2 = X_9[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_9[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_9[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_9[D_9[r][s]] * W_9[r][s];
            }
            return result;
        }
        break;
    case 10:
        {
            result = 0.0;
            double X_10[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_10[36][1] = {};
            double W_10[36][1] =
                { { -0.009710973194534896 },
                  { -0.015975694174423887 },
                  { -0.012914808498775162 },
                  { -0.006024109540551331 },
                  { -0.0014033523604530267 },
                  { -8.831972792250468e-5 },
                  { -0.01449999797697064 },
                  { -0.023854203751711895 },
                  { -0.019283823912786737 },
                  { -0.00899493535830189 },
                  { -0.00209542400951097 },
                  { -0.00013187513244538945 },
                  { -0.006787033586233021 },
                  { -0.011165469284399073 },
                  { -0.009026205436370045 },
                  { -0.0042102715103650165 },
                  { -0.0009808079389071213 },
                  { -6.172697089456968e-5 },
                  { 0.006787033586233017 },
                  { 0.011165469284399062 },
                  { 0.00902620543637004 },
                  { 0.004210271510365018 },
                  { 0.0009808079389071207 },
                  { 6.172697089456923e-5 },
                  { 0.014499997976970646 },
                  { 0.023854203751711905 },
                  { 0.01928382391278674 },
                  { 0.008994935358301898 },
                  { 0.00209542400951097 },
                  { 0.00013187513244538915 },
                  { 0.00971097319453492 },
                  { 0.015975694174423925 },
                  { 0.012914808498775193 },
                  { 0.006024109540551347 },
                  { 0.0014033523604530306 },
                  { 8.831972792250464e-5 } };
            double copy_10[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_10[r][0] - X_10[r][1];
                const double w1 = X_10[r][0];
                const double w2 = X_10[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_10[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_10[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_10[D_10[r][s]] * W_10[r][s];
            }
            return result;
        }
        break;
    case 11:
        {
            result = 0.0;
            double X_11[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_11[36][1] = {};
            double W_11[36][1] =
                { { -0.00564948416560004 },
                  { -0.006452908537728117 },
                  { 0.0001321127369674421 },
                  { 0.005713361221947881 },
                  { 0.00492388644483935 },
                  { 0.0013330322995734722 },
                  { -0.011896237170700168 },
                  { -0.013588024703755641 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.015429623211032667 },
                  { -0.017623900595856532 },
                  { 0.0003608205091003015 },
                  { 0.015604081423921987 },
                  { 0.013447902560801864 },
                  { 0.0036407193130650224 },
                  { -0.015429623211032657 },
                  { -0.017623900595856525 },
                  { 0.00036082050910030123 },
                  { 0.015604081423921978 },
                  { 0.013447902560801856 },
                  { 0.0036407193130650202 },
                  { -0.011896237170700168 },
                  { -0.013588024703755645 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.005649484165600055 },
                  { -0.006452908537728134 },
                  { 0.00013211273696744246 },
                  { 0.005713361221947897 },
                  { 0.004923886444839364 },
                  { 0.0013330322995734759 } };
            double copy_11[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_11[r][0] - X_11[r][1];
                const double w1 = X_11[r][0];
                const double w2 = X_11[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_11[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_11[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_11[D_11[r][s]] * W_11[r][s];
            }
            return result;
        }
        break;
    case 12:
        {
            result = 0.0;
            double X_12[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_12[36][1] =
                { { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 } };
            double W_12[36][1] =
                { { 0.004380007035333952 },
                  { 0.00821012828325171 },
                  { 0.008528136573677752 },
                  { 0.0059761382734593235 },
                  { 0.002662467899383865 },
                  { 0.0005292995210569465 },
                  { 0.009223072580491742 },
                  { 0.017288239137681006 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.011962482987098903 },
                  { 0.022423142044750127 },
                  { 0.023291672330955 },
                  { 0.016321766574367406 },
                  { 0.0072716154775874856 },
                  { 0.001445599622248223 },
                  { 0.011962482987098896 },
                  { 0.022423142044750117 },
                  { 0.023291672330954985 },
                  { 0.016321766574367395 },
                  { 0.007271615477587481 },
                  { 0.0014455996222482222 },
                  { 0.009223072580491742 },
                  { 0.01728823913768101 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.004380007035333964 },
                  { 0.008210128283251733 },
                  { 0.008528136573677774 },
                  { 0.005976138273459339 },
                  { 0.0026624678993838725 },
                  { 0.000529299521056948 } };
            double copy_12[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_12[r][0] - X_12[r][1];
                const double w1 = X_12[r][0];
                const double w2 = X_12[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_12[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_12[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_12[D_12[r][s]] * W_12[r][s];
            }
            return result;
        }
        break;
    case 13:
        {
            result = 0.0;
            double X_13[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_13[36][1] =
                { { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 } };
            double W_13[36][1] =
                { { -0.009710973194534896 },
                  { -0.015975694174423887 },
                  { -0.012914808498775162 },
                  { -0.006024109540551331 },
                  { -0.0014033523604530267 },
                  { -8.831972792250468e-5 },
                  { -0.01449999797697064 },
                  { -0.023854203751711895 },
                  { -0.019283823912786737 },
                  { -0.00899493535830189 },
                  { -0.00209542400951097 },
                  { -0.00013187513244538945 },
                  { -0.006787033586233021 },
                  { -0.011165469284399073 },
                  { -0.009026205436370045 },
                  { -0.0042102715103650165 },
                  { -0.0009808079389071213 },
                  { -6.172697089456968e-5 },
                  { 0.006787033586233017 },
                  { 0.011165469284399062 },
                  { 0.00902620543637004 },
                  { 0.004210271510365018 },
                  { 0.0009808079389071207 },
                  { 6.172697089456923e-5 },
                  { 0.014499997976970646 },
                  { 0.023854203751711905 },
                  { 0.01928382391278674 },
                  { 0.008994935358301898 },
                  { 0.00209542400951097 },
                  { 0.00013187513244538915 },
                  { 0.00971097319453492 },
                  { 0.015975694174423925 },
                  { 0.012914808498775193 },
                  { 0.006024109540551347 },
                  { 0.0014033523604530306 },
                  { 8.831972792250464e-5 } };
            double copy_13[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_13[r][0] - X_13[r][1];
                const double w1 = X_13[r][0];
                const double w2 = X_13[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_13[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_13[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_13[D_13[r][s]] * W_13[r][s];
            }
            return result;
        }
        break;
    case 14:
        {
            result = 0.0;
            double X_14[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_14[36][1] =
                { { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 } };
            double W_14[36][1] =
                { { -0.00564948416560004 },
                  { -0.006452908537728117 },
                  { 0.0001321127369674421 },
                  { 0.005713361221947881 },
                  { 0.00492388644483935 },
                  { 0.0013330322995734722 },
                  { -0.011896237170700168 },
                  { -0.013588024703755641 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.015429623211032667 },
                  { -0.017623900595856532 },
                  { 0.0003608205091003015 },
                  { 0.015604081423921987 },
                  { 0.013447902560801864 },
                  { 0.0036407193130650224 },
                  { -0.015429623211032657 },
                  { -0.017623900595856525 },
                  { 0.00036082050910030123 },
                  { 0.015604081423921978 },
                  { 0.013447902560801856 },
                  { 0.0036407193130650202 },
                  { -0.011896237170700168 },
                  { -0.013588024703755645 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.005649484165600055 },
                  { -0.006452908537728134 },
                  { 0.00013211273696744246 },
                  { 0.005713361221947897 },
                  { 0.004923886444839364 },
                  { 0.0013330322995734759 } };
            double copy_14[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_14[r][0] - X_14[r][1];
                const double w1 = X_14[r][0];
                const double w2 = X_14[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_14[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_14[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_14[D_14[r][s]] * W_14[r][s];
            }
            return result;
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
    y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0] * J[1] + vals[1] * J[2 + 1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0] * J[1] + vals[1] * J[2 + 1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0] * J[1] + vals[1] * J[2 + 1];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[6] = vals[0] * J[0] + vals[1] * J[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0] * J[0] + vals[1] * J[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0] * J[0] + vals[1] * J[2];
    result = 0.0;
    double X_9[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_9[36][1] = {};
    double W_9[36][1] =
        { { 0.004380007035333952 },
          { 0.00821012828325171 },
          { 0.008528136573677752 },
          { 0.0059761382734593235 },
          { 0.002662467899383865 },
          { 0.0005292995210569465 },
          { 0.009223072580491742 },
          { 0.017288239137681006 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.011962482987098903 },
          { 0.022423142044750127 },
          { 0.023291672330955 },
          { 0.016321766574367406 },
          { 0.0072716154775874856 },
          { 0.001445599622248223 },
          { 0.011962482987098896 },
          { 0.022423142044750117 },
          { 0.023291672330954985 },
          { 0.016321766574367395 },
          { 0.007271615477587481 },
          { 0.0014455996222482222 },
          { 0.009223072580491742 },
          { 0.01728823913768101 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.004380007035333964 },
          { 0.008210128283251733 },
          { 0.008528136573677774 },
          { 0.005976138273459339 },
          { 0.0026624678993838725 },
          { 0.000529299521056948 } };
    double copy_9[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_9[r][0] - X_9[r][1];
        const double w1 = X_9[r][0];
        const double w2 = X_9[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_9[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_9[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_9[D_9[r][s]] * W_9[r][s];
    }
    values[9] = result;
    result = 0.0;
    double X_10[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_10[36][1] = {};
    double W_10[36][1] =
        { { -0.009710973194534896 },
          { -0.015975694174423887 },
          { -0.012914808498775162 },
          { -0.006024109540551331 },
          { -0.0014033523604530267 },
          { -8.831972792250468e-5 },
          { -0.01449999797697064 },
          { -0.023854203751711895 },
          { -0.019283823912786737 },
          { -0.00899493535830189 },
          { -0.00209542400951097 },
          { -0.00013187513244538945 },
          { -0.006787033586233021 },
          { -0.011165469284399073 },
          { -0.009026205436370045 },
          { -0.0042102715103650165 },
          { -0.0009808079389071213 },
          { -6.172697089456968e-5 },
          { 0.006787033586233017 },
          { 0.011165469284399062 },
          { 0.00902620543637004 },
          { 0.004210271510365018 },
          { 0.0009808079389071207 },
          { 6.172697089456923e-5 },
          { 0.014499997976970646 },
          { 0.023854203751711905 },
          { 0.01928382391278674 },
          { 0.008994935358301898 },
          { 0.00209542400951097 },
          { 0.00013187513244538915 },
          { 0.00971097319453492 },
          { 0.015975694174423925 },
          { 0.012914808498775193 },
          { 0.006024109540551347 },
          { 0.0014033523604530306 },
          { 8.831972792250464e-5 } };
    double copy_10[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_10[r][0] - X_10[r][1];
        const double w1 = X_10[r][0];
        const double w2 = X_10[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_10[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_10[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_10[D_10[r][s]] * W_10[r][s];
    }
    values[10] = result;
    result = 0.0;
    double X_11[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_11[36][1] = {};
    double W_11[36][1] =
        { { -0.00564948416560004 },
          { -0.006452908537728117 },
          { 0.0001321127369674421 },
          { 0.005713361221947881 },
          { 0.00492388644483935 },
          { 0.0013330322995734722 },
          { -0.011896237170700168 },
          { -0.013588024703755641 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.015429623211032667 },
          { -0.017623900595856532 },
          { 0.0003608205091003015 },
          { 0.015604081423921987 },
          { 0.013447902560801864 },
          { 0.0036407193130650224 },
          { -0.015429623211032657 },
          { -0.017623900595856525 },
          { 0.00036082050910030123 },
          { 0.015604081423921978 },
          { 0.013447902560801856 },
          { 0.0036407193130650202 },
          { -0.011896237170700168 },
          { -0.013588024703755645 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.005649484165600055 },
          { -0.006452908537728134 },
          { 0.00013211273696744246 },
          { 0.005713361221947897 },
          { 0.004923886444839364 },
          { 0.0013330322995734759 } };
    double copy_11[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_11[r][0] - X_11[r][1];
        const double w1 = X_11[r][0];
        const double w2 = X_11[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_11[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_11[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_11[D_11[r][s]] * W_11[r][s];
    }
    values[11] = result;
    result = 0.0;
    double X_12[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_12[36][1] =
        { { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 } };
    double W_12[36][1] =
        { { 0.004380007035333952 },
          { 0.00821012828325171 },
          { 0.008528136573677752 },
          { 0.0059761382734593235 },
          { 0.002662467899383865 },
          { 0.0005292995210569465 },
          { 0.009223072580491742 },
          { 0.017288239137681006 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.011962482987098903 },
          { 0.022423142044750127 },
          { 0.023291672330955 },
          { 0.016321766574367406 },
          { 0.0072716154775874856 },
          { 0.001445599622248223 },
          { 0.011962482987098896 },
          { 0.022423142044750117 },
          { 0.023291672330954985 },
          { 0.016321766574367395 },
          { 0.007271615477587481 },
          { 0.0014455996222482222 },
          { 0.009223072580491742 },
          { 0.01728823913768101 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.004380007035333964 },
          { 0.008210128283251733 },
          { 0.008528136573677774 },
          { 0.005976138273459339 },
          { 0.0026624678993838725 },
          { 0.000529299521056948 } };
    double copy_12[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_12[r][0] - X_12[r][1];
        const double w1 = X_12[r][0];
        const double w2 = X_12[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_12[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_12[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_12[D_12[r][s]] * W_12[r][s];
    }
    values[12] = result;
    result = 0.0;
    double X_13[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_13[36][1] =
        { { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 } };
    double W_13[36][1] =
        { { -0.009710973194534896 },
          { -0.015975694174423887 },
          { -0.012914808498775162 },
          { -0.006024109540551331 },
          { -0.0014033523604530267 },
          { -8.831972792250468e-5 },
          { -0.01449999797697064 },
          { -0.023854203751711895 },
          { -0.019283823912786737 },
          { -0.00899493535830189 },
          { -0.00209542400951097 },
          { -0.00013187513244538945 },
          { -0.006787033586233021 },
          { -0.011165469284399073 },
          { -0.009026205436370045 },
          { -0.0042102715103650165 },
          { -0.0009808079389071213 },
          { -6.172697089456968e-5 },
          { 0.006787033586233017 },
          { 0.011165469284399062 },
          { 0.00902620543637004 },
          { 0.004210271510365018 },
          { 0.0009808079389071207 },
          { 6.172697089456923e-5 },
          { 0.014499997976970646 },
          { 0.023854203751711905 },
          { 0.01928382391278674 },
          { 0.008994935358301898 },
          { 0.00209542400951097 },
          { 0.00013187513244538915 },
          { 0.00971097319453492 },
          { 0.015975694174423925 },
          { 0.012914808498775193 },
          { 0.006024109540551347 },
          { 0.0014033523604530306 },
          { 8.831972792250464e-5 } };
    double copy_13[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_13[r][0] - X_13[r][1];
        const double w1 = X_13[r][0];
        const double w2 = X_13[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_13[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_13[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_13[D_13[r][s]] * W_13[r][s];
    }
    values[13] = result;
    result = 0.0;
    double X_14[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_14[36][1] =
        { { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 } };
    double W_14[36][1] =
        { { -0.00564948416560004 },
          { -0.006452908537728117 },
          { 0.0001321127369674421 },
          { 0.005713361221947881 },
          { 0.00492388644483935 },
          { 0.0013330322995734722 },
          { -0.011896237170700168 },
          { -0.013588024703755641 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.015429623211032667 },
          { -0.017623900595856532 },
          { 0.0003608205091003015 },
          { 0.015604081423921987 },
          { 0.013447902560801864 },
          { 0.0036407193130650224 },
          { -0.015429623211032657 },
          { -0.017623900595856525 },
          { 0.00036082050910030123 },
          { 0.015604081423921978 },
          { 0.013447902560801856 },
          { 0.0036407193130650202 },
          { -0.011896237170700168 },
          { -0.013588024703755645 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.005649484165600055 },
          { -0.006452908537728134 },
          { 0.00013211273696744246 },
          { 0.005713361221947897 },
          { 0.004923886444839364 },
          { 0.0013330322995734759 } };
    double copy_14[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_14[r][0] - X_14[r][1];
        const double w1 = X_14[r][0];
        const double w2 = X_14[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_14[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_14[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_14[D_14[r][s]] * W_14[r][s];
    }
    values[14] = result;
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Evaluate function and change variables
    vertex_values[0] = dof_values[3] * (K[2] * 3.0) + dof_values[4] * (K[2] * -2.9999999999999987) + dof_values[5] * K[2] + dof_values[6] * (K[0] * 3.000000000000001) + dof_values[7] * (K[0] * -3.0000000000000004) + dof_values[8] * K[0];
    vertex_values[2] = dof_values[0] * (K[2] * 3.0000000000000018) + dof_values[1] * (K[2] * -3.000000000000006) + dof_values[2] * K[2] + dof_values[6] * (K[0] + K[2]) + dof_values[7] * (K[0] * -3.0000000000000013 + K[2] * -3.000000000000002) + dof_values[8] * (K[0] * 3.0 + K[2] * 3.0000000000000036);
    vertex_values[4] = dof_values[0] * -K[0] + dof_values[1] * (K[0] * 2.9999999999999933) + dof_values[2] * (K[0] * -2.9999999999999964) + dof_values[3] * (K[0] + K[2]) + dof_values[4] * (K[0] * -2.999999999999998 + K[2] * -3.0) + dof_values[5] * (K[0] * 2.9999999999999947 + K[2] * 3.0);
    vertex_values[1] = dof_values[3] * (K[2 + 1] * 3.0) + dof_values[4] * (K[2 + 1] * -2.9999999999999987) + dof_values[5] * K[2 + 1] + dof_values[6] * (K[1] * 3.000000000000001) + dof_values[7] * (K[1] * -3.0000000000000004) + dof_values[8] * K[1];
    vertex_values[3] = dof_values[0] * (K[2 + 1] * 3.0000000000000018) + dof_values[1] * (K[2 + 1] * -3.000000000000006) + dof_values[2] * K[2 + 1] + dof_values[6] * (K[1] + K[2 + 1]) + dof_values[7] * (K[1] * -3.0000000000000013 + K[2 + 1] * -3.000000000000002) + dof_values[8] * (K[1] * 3.0 + K[2 + 1] * 3.0000000000000036);
    vertex_values[5] = dof_values[0] * -K[1] + dof_values[1] * (K[1] * 2.9999999999999933) + dof_values[2] * (K[1] * -2.9999999999999964) + dof_values[3] * (K[1] + K[2 + 1]) + dof_values[4] * (K[1] * -2.999999999999998 + K[2 + 1] * -3.0) + dof_values[5] * (K[1] * 2.9999999999999947 + K[2 + 1] * 3.0);
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    throw std::runtime_error("tabulate_dof_coordinates is not defined for this element");
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    throw std::runtime_error("tabulate_reference_dof_coordinates is not defined for this element");
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new forms_finite_element_2();
  }

};


class forms_dofmap_0: public ufc::dofmap
{
public:

  forms_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~forms_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new forms_dofmap_0();
  }

};


class forms_dofmap_1: public ufc::dofmap
{
public:

  forms_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~forms_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_dofmap_0();
    case 1:
        return new forms_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new forms_dofmap_1();
  }

};


class forms_dofmap_2: public ufc::dofmap
{
public:

  forms_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~forms_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Nedelec 1st kind H(curl)', triangle, 3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[1] + 6 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 3, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + 3 * entity_indices[1][0];
    dofs[1] = offset + 3 * entity_indices[1][0] + 1;
    dofs[2] = offset + 3 * entity_indices[1][0] + 2;
    dofs[3] = offset + 3 * entity_indices[1][1];
    dofs[4] = offset + 3 * entity_indices[1][1] + 1;
    dofs[5] = offset + 3 * entity_indices[1][1] + 2;
    dofs[6] = offset + 3 * entity_indices[1][2];
    dofs[7] = offset + 3 * entity_indices[1][2] + 1;
    dofs[8] = offset + 3 * entity_indices[1][2] + 2;
    offset += 3 * num_global_entities[1];
    dofs[9] = offset + 6 * entity_indices[2][0];
    dofs[10] = offset + 6 * entity_indices[2][0] + 1;
    dofs[11] = offset + 6 * entity_indices[2][0] + 2;
    dofs[12] = offset + 6 * entity_indices[2][0] + 3;
    dofs[13] = offset + 6 * entity_indices[2][0] + 4;
    dofs[14] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    case 1:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        break;
    case 2:
        dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 8;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 8;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new forms_dofmap_2();
  }

};


class forms_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  forms_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~forms_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new forms_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new forms_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    forms_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    forms_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class forms_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  forms_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~forms_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 4
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           4
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q6[0][0][1];
    alignas(32) double sp[36];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c3 / sp[2];
    sp[4] = -1 * J_c2 / sp[2];
    sp[5] = J_c0 / sp[2];
    sp[6] = sp[5] * sp[3];
    sp[7] = sp[5] * sp[4];
    sp[8] = -1 * J_c1 / sp[2];
    sp[9] = sp[3] * sp[8];
    sp[10] = sp[8] * sp[4];
    sp[11] = -1 * sp[10] + sp[6];
    sp[12] = -1 * sp[7] + sp[7];
    sp[13] = -1 * sp[9] + sp[9];
    sp[14] = -1 * sp[6] + sp[10];
    sp[15] = sp[11] * sp[11];
    sp[16] = sp[11] * sp[12];
    sp[17] = sp[11] * sp[13];
    sp[18] = sp[11] * sp[14];
    sp[19] = sp[12] * sp[12];
    sp[20] = sp[13] * sp[12];
    sp[21] = sp[12] * sp[14];
    sp[22] = sp[13] * sp[13];
    sp[23] = sp[13] * sp[14];
    sp[24] = sp[14] * sp[14];
    sp[25] = std::abs(sp[2]);
    sp[26] = sp[15] * sp[25];
    sp[27] = sp[16] * sp[25];
    sp[28] = sp[17] * sp[25];
    sp[29] = sp[18] * sp[25];
    sp[30] = sp[19] * sp[25];
    sp[31] = sp[20] * sp[25];
    sp[32] = sp[21] * sp[25];
    sp[33] = sp[22] * sp[25];
    sp[34] = sp[23] * sp[25];
    sp[35] = sp[24] * sp[25];
    A[0] = 2.633333333333341 * sp[33] + 0.3583333333333392 * sp[34] + -0.6083333333333337 * sp[28] + -0.6083333333333284 * sp[31] + 0.3583333333333392 * sp[34] + 0.858333333333346 * sp[35] + -1.87500000000002 * sp[29] + -0.6083333333333396 * sp[32] + -0.6083333333333337 * sp[28] + -1.87500000000002 * sp[29] + 6.191666666666698 * sp[26] + 1.691666666666667 * sp[27] + -0.6083333333333284 * sp[31] + -0.6083333333333396 * sp[32] + 1.691666666666667 * sp[27] + 0.6333333333333313 * sp[30];
    A[1] = -2.016666666666666 * sp[33] + 1.116666666666664 * sp[34] + -0.6166666666666671 * sp[28] + -0.6166666666666778 * sp[31] + 0.283333333333335 * sp[34] + -0.8000000000000055 * sp[35] + sp[29] + -0.6166666666666786 * sp[32] + 0.2166666666666632 * sp[28] + 1.66666666666668 * sp[29] + -3.466666666666693 * sp[26] + 2.783333333333347 * sp[27] + 0.2166666666666583 * sp[31] + 0.2166666666666743 * sp[32] + -0.7166666666666713 * sp[27] + 0.816666666666665 * sp[30];
    A[2] = -0.0333333333333326 * sp[33] + -0.8916666666666662 * sp[34] + -0.1916666666666674 * sp[28] + -0.1916666666666644 * sp[31] + 0.4416666666666682 * sp[34] + 1.275000000000003 * sp[35] + -0.7916666666666761 * sp[29] + -0.1916666666666623 * sp[32] + -0.1916666666666653 * sp[28] + -0.7916666666666691 * sp[29] + 1.275000000000012 * sp[26] + -0.8916666666666719 * sp[27] + -0.1916666666666679 * sp[31] + -0.1916666666666727 * sp[32] + 0.4416666666666705 * sp[27] + -0.0333333333333321 * sp[30];
    A[3] = -1.591666666666674 * sp[33] + -0.6500000000000044 * sp[34] + -2.283333333333347 * sp[28] + -0.6500000000000111 * sp[31] + -0.9416666666666764 * sp[34] + -1.295833333333347 * sp[35] + -0.1125000000000033 * sp[29] + -0.4666666666666739 * sp[32] + 0.6916666666666702 * sp[28] + 1.520833333333349 * sp[29] + -1.09583333333333 * sp[26] + -0.2666666666666558 * sp[27] + 0.6916666666666682 * sp[31] + 0.6916666666666724 * sp[32] + 0.6916666666666682 * sp[27] + 0.5083333333333397 * sp[30];
    A[4] = -0.06666666666666399 * sp[33] + -0.5333333333333314 * sp[34] + -0.09999999999999531 * sp[28] + -0.5333333333333315 * sp[31] + 0.8833333333333391 * sp[34] + 1.675000000000007 * sp[35] + 0.1416666666666677 * sp[29] + 0.9333333333333276 * sp[32] + -0.3833333333333339 * sp[28] + -0.958333333333337 * sp[29] + 0.4416666666666665 * sp[26] + -0.1333333333333316 * sp[27] + -0.3833333333333377 * sp[31] + -0.3833333333333405 * sp[32] + -0.3833333333333369 * sp[27] + -0.6000000000000036 * sp[30];
    A[5] = -1.008333333333331 * sp[33] + 1.183333333333332 * sp[34] + -2.11666666666667 * sp[28] + 1.183333333333332 * sp[31] + 0.1416666666666681 * sp[34] + -0.8375000000000032 * sp[35] + 0.5125000000000046 * sp[29] + -0.4666666666666651 * sp[32] + 0.1083333333333306 * sp[28] + 1.145833333333341 * sp[29] + -0.6375000000000119 * sp[26] + 0.400000000000009 * sp[27] + 0.1083333333333285 * sp[31] + 0.1083333333333399 * sp[32] + 0.1083333333333242 * sp[27] + 0.09166666666667424 * sp[30];
    A[6] = -1.091666666666674 * sp[33] + -1.108333333333342 * sp[34] + -1.108333333333335 * sp[28] + -1.108333333333335 * sp[31] + -0.7333333333333449 * sp[34] + -0.3624999999999964 * sp[35] + -1.479166666666683 * sp[29] + -1.108333333333341 * sp[32] + 2.133333333333349 * sp[28] + 1.154166666666657 * sp[29] + 3.170833333333348 * sp[26] + 2.191666666666669 * sp[27] + 1.150000000000002 * sp[31] + 1.116666666666661 * sp[32] + 1.150000000000001 * sp[27] + 1.008333333333332 * sp[30];
    A[7] = 2.600000000000012 * sp[33] + 1.21666666666667 * sp[34] + 1.216666666666667 * sp[28] + 1.216666666666663 * sp[31] + 1.466666666666684 * sp[34] + 0.3083333333333411 * sp[35] + 2.375000000000025 * sp[29] + 1.216666666666678 * sp[32] + -4.93333333333336 * sp[28] + -1.058333333333332 * sp[29] + -7.258333333333365 * sp[26] + -3.383333333333333 * sp[27] + -2.133333333333332 * sp[31] + -0.8999999999999982 * sp[32] + -2.133333333333332 * sp[27] + -1.266666666666662 * sp[30];
    A[8] = -1.508333333333339 * sp[33] + 0.3083333333333444 * sp[34] + 0.3083333333333348 * sp[28] + 0.3083333333333444 * sp[31] + -0.7333333333333401 * sp[34] + 0.7625000000000077 * sp[35] + -1.187500000000011 * sp[29] + 0.3083333333333412 * sp[32] + 2.800000000000011 * sp[28] + -2.887500000000008 * sp[29] + 4.295833333333356 * sp[26] + -1.391666666666681 * sp[27] + 0.9833333333333297 * sp[31] + -0.7166666666666636 * sp[32] + 0.9833333333333347 * sp[27] + -0.4083333333333349 * sp[30];
    A[9] = 1.649915822768633 * sp[33] + 0.4714045207910296 * sp[34] + -5.18544972870135 * sp[28] + -5.18544972870137 * sp[31] + 3.064129385141737 * sp[34] + 1.767766952966348 * sp[35] + -3.889087296526051 * sp[29] + -5.185449728701416 * sp[32] + -1.649915822768621 * sp[28] + 5.067598598503602 * sp[29] + 10.72445284799599 * sp[26] + 17.44196726926821 * sp[27] + -1.649915822768627 * sp[31] + -0.2357022603955312 * sp[32] + 4.006938426723755 * sp[27] + 5.892556509887877 * sp[30];
    A[10] = 10.96965511460293 * sp[33] + 0.7216878364869894 * sp[34] + -10.53664241271068 * sp[28] + -10.53664241271071 * sp[31] + 0.1443375672973244 * sp[34] + -1.732050807568892 * sp[35] + -8.660254037844478 * sp[29] + -10.53664241271078 * sp[32] + 0.7216878364870887 * sp[28] + 11.54700538379247 * sp[29] + 18.47520861406806 * sp[26] + 29.30052616137357 * sp[27] + 0.7216878364870822 * sp[31] + 5.051814855409201 * sp[32] + 7.649891066762525 * sp[27] + 10.96965511460286 * sp[30];
    A[11] = -6.833333333333358 * sp[33] + 1.583333333333338 * sp[34] + 0.08333333333333304 * sp[28] + 0.0833333333333357 * sp[31] + 2.416666666666663 * sp[34] + 3.749999999999964 * sp[35] + -1.250000000000022 * sp[29] + 0.08333333333338033 * sp[32] + 0.08333333333335335 * sp[28] + -4.916666666666615 * sp[29] + -5.916666666666646 * sp[26] + -10.9166666666667 * sp[27] + 0.08333333333331411 * sp[31] + 0.5833333333333677 * sp[32] + -0.9166666666666377 * sp[27] + -1.833333333333316 * sp[30];
    A[12] = 5.892556509887894 * sp[33] + -1.649915822768606 * sp[34] + 16.73486048808167 * sp[28] + 4.006938426723791 * sp[31] + -3.299831645537239 * sp[34] + -2.474873734152916 * sp[35] + 3.181980515339504 * sp[29] + 4.006938426723843 * sp[32] + 0.471404520791036 * sp[28] + -2.003469213361923 * sp[29] + -7.660323462854263 * sp[26] + -10.13519719700728 * sp[27] + 0.4714045207910637 * sp[31] + 0.4714045207910251 * sp[32] + -5.185449728701312 * sp[27] + -4.006938426723794 * sp[30];
    A[13] = -16.88749537379663 * sp[33] + -7.361215932167761 * sp[34] + -7.361215932167781 * sp[28] + 3.89711431702995 * sp[31] + -5.196152422706678 * sp[34] + -6.278684177437281 * sp[35] + 4.979646071760492 * sp[29] + 3.897114317029925 * sp[32] + 5.196152422706637 * sp[28] + 11.90784930203616 * sp[29] + -21.86714144555711 * sp[26] + -15.15544456622757 * sp[27] + 5.196152422706613 * sp[31] + 5.196152422706662 * sp[32] + -1.732050807568852 * sp[27] + -3.897114317029895 * sp[30];
    A[14] = 10.41666666666664 * sp[33] + -2.916666666666663 * sp[34] + 10.08333333333332 * sp[28] + -1.416666666666676 * sp[31] + -5.833333333333369 * sp[34] + -4.375000000000005 * sp[35] + -2.875000000000027 * sp[29] + -1.416666666666771 * sp[32] + 0.8333333333333577 * sp[28] + -3.541666666666716 * sp[29] + 7.958333333333427 * sp[26] + 3.583333333333347 * sp[27] + 0.8333333333333975 * sp[31] + 0.8333333333333282 * sp[32] + 1.833333333333381 * sp[27] + 2.916666666666675 * sp[30];
    A[15] = -2.016666666666666 * sp[33] + 0.283333333333335 * sp[34] + 0.2166666666666632 * sp[28] + 0.2166666666666583 * sp[31] + 1.116666666666664 * sp[34] + -0.8000000000000055 * sp[35] + 1.66666666666668 * sp[29] + 0.2166666666666743 * sp[32] + -0.6166666666666671 * sp[28] + sp[29] + -3.466666666666693 * sp[26] + -0.7166666666666713 * sp[27] + -0.6166666666666778 * sp[31] + -0.6166666666666786 * sp[32] + 2.783333333333347 * sp[27] + 0.816666666666665 * sp[30];
    A[16] = 2.533333333333337 * sp[33] + -1.733333333333338 * sp[34] + 0.7333333333333379 * sp[28] + 0.7333333333333465 * sp[31] + -1.733333333333338 * sp[34] + 2.766666666666665 * sp[35] + -2.166666666666674 * sp[29] + 0.7333333333333434 * sp[32] + 0.7333333333333379 * sp[28] + -2.166666666666674 * sp[29] + 2.766666666666687 * sp[26] + -1.733333333333343 * sp[27] + 0.7333333333333465 * sp[31] + 0.7333333333333434 * sp[32] + -1.733333333333343 * sp[27] + 2.533333333333339 * sp[30];
    A[17] = 0.8166666666666691 * sp[33] + 2.783333333333344 * sp[34] + -0.6166666666666745 * sp[28] + -0.6166666666666739 * sp[31] + -0.716666666666669 * sp[34] + -3.466666666666674 * sp[35] + sp[29] + -0.6166666666666744 * sp[32] + 0.2166666666666683 * sp[28] + 1.666666666666675 * sp[29] + -0.8000000000000113 * sp[26] + 1.116666666666669 * sp[27] + 0.2166666666666717 * sp[31] + 0.21666666666667 * sp[32] + 0.2833333333333354 * sp[27] + -2.016666666666675 * sp[30];
    A[18] = -0.06666666666667354 * sp[33] + -0.9500000000000079 * sp[34] + 0.3166666666666668 * sp[28] + -0.9499999999999991 * sp[31] + 0.4666666666666763 * sp[34] + 1.258333333333348 * sp[35] + -0.1083333333333341 * sp[29] + 0.6833333333333408 * sp[32] + 0.03333333333332811 * sp[28] + -0.7083333333333471 * sp[29] + 0.8583333333333297 * sp[26] + 0.1166666666666569 * sp[27] + 0.03333333333333321 * sp[31] + 0.03333333333333774 * sp[32] + 0.03333333333332741 * sp[27] + -0.1833333333333376 * sp[30];
    A[19] = 1.633333333333341 * sp[33] + 3.066666666666682 * sp[34] + 1.199999999999998 * sp[28] + 3.066666666666674 * sp[31] + -1.433333333333341 * sp[34] + -3.683333333333347 * sp[35] + -0.2833333333333334 * sp[29] + -2.533333333333327 * sp[32] + 0.4333333333333383 * sp[28] + 1.583333333333345 * sp[29] + -0.2166666666666636 * sp[26] + 0.9333333333333438 * sp[27] + 0.4333333333333431 * sp[31] + 0.4333333333333394 * sp[32] + 0.4333333333333481 * sp[27] + 1.200000000000022 * sp[30];
    A[20] = 1.266666666666668 * sp[33] + -2.116666666666674 * sp[34] + 2.483333333333339 * sp[28] + -2.116666666666675 * sp[31] + -0.8666666666666686 * sp[34] + 3.008333333333335 * sp[35] + -2.025000000000007 * sp[29] + 1.849999999999992 * sp[32] + 0.366666666666669 * sp[28] + -1.95833333333334 * sp[29] + 1.275000000000011 * sp[26] + -1.050000000000008 * sp[27] + 0.3666666666666728 * sp[31] + 0.3666666666666709 * sp[32] + 0.3666666666666739 * sp[27] + -1.016666666666665 * sp[30];
    A[21] = 0.1833333333333353 * sp[33] + -0.03333333333332741 * sp[34] + -0.03333333333334199 * sp[28] + -0.03333333333333932 * sp[31] + -0.1166666666666595 * sp[34] + -0.8583333333333467 * sp[35] + 0.7083333333333501 * sp[29] + -0.03333333333333011 * sp[32] + -0.6833333333333474 * sp[28] + 0.1083333333333332 * sp[29] + -1.258333333333349 * sp[26] + -0.4666666666666727 * sp[27] + 0.9499999999999994 * sp[31] + -0.316666666666692 * sp[32] + 0.9500000000000042 * sp[27] + 0.06666666666665771 * sp[30];
    A[22] = -1.200000000000001 * sp[33] + -0.4333333333333304 * sp[34] + -0.4333333333333272 * sp[28] + -0.4333333333333243 * sp[31] + -0.93333333333334 * sp[34] + 0.2166666666666597 * sp[35] + -1.583333333333353 * sp[29] + -0.4333333333333446 * sp[32] + 2.533333333333358 * sp[28] + 0.283333333333336 * sp[29] + 3.683333333333363 * sp[26] + 1.43333333333334 * sp[27] + -3.066666666666677 * sp[31] + -1.199999999999988 * sp[32] + -3.066666666666682 * sp[27] + -1.633333333333328 * sp[30];
    A[23] = 1.016666666666665 * sp[33] + -0.3666666666666831 * sp[34] + -0.3666666666666705 * sp[28] + -0.3666666666666789 * sp[31] + 1.05 * sp[34] + -1.275000000000007 * sp[35] + 1.958333333333341 * sp[29] + -0.3666666666666717 * sp[32] + -1.85000000000001 * sp[28] + 2.025000000000007 * sp[29] + -3.008333333333353 * sp[26] + 0.8666666666666751 * sp[27] + 2.116666666666676 * sp[31] + -2.483333333333339 * sp[32] + 2.116666666666676 * sp[27] + -1.266666666666675 * sp[30];
    A[24] = 3.771236166328282 * sp[33] + 6.128258770283456 * sp[34] + 3.29983164553722 * sp[28] + 3.299831645537235 * sp[31] + -3.771236166328285 * sp[34] + 1.178511301977612 * sp[35] + -1.649915822768579 * sp[29] + 3.299831645537284 * sp[32] + 0.9428090415820796 * sp[28] + -5.421151989096853 * sp[29] + -2.592724864350703 * sp[26] + -8.956685895029654 * sp[27] + 0.9428090415820859 * sp[31] + 12.25651754056687 * sp[32] + 3.771236166328271 * sp[27] + 11.7851130197758 * sp[30];
    A[25] = -8.948929172439183 * sp[33] + -1.443375672973986 * sp[34] + 3.752776749732529 * sp[28] + 3.752776749732572 * sp[31] + -3.175426480542785 * sp[34] + 2.020725942163697 * sp[35] + -1.443375672973972 * sp[29] + 3.752776749732649 * sp[32] + 1.443375672974013 * sp[28] + -7.216878364870322 * sp[29] + -3.752776749732626 * sp[26] + -12.41303078757704 * sp[27] + 1.44337567297394 * sp[31] + 10.10362971081831 * sp[32] + 4.907477288111832 * sp[27] + 14.1450815951458 * sp[30];
    A[26] = 11.1666666666667 * sp[33] + 1.833333333333342 * sp[34] + -5.166666666666721 * sp[28] + -5.166666666666701 * sp[31] + -8.166666666666686 * sp[34] + -16.66666666666666 * sp[35] + 3.333333333333384 * sp[29] + -5.166666666666741 * sp[32] + 3.166666666666679 * sp[28] + 10.66666666666666 * sp[29] + 2.666666666666644 * sp[26] + 10.16666666666669 * sp[27] + 3.166666666666741 * sp[31] + -7.833333333333405 * sp[32] + -4.833333333333353 * sp[27] + -17.16666666666671 * sp[30];
    A[27] = -11.78511301977582 * sp[33] + -3.771236166328281 * sp[34] + -12.25651754056681 * sp[28] + -0.9428090415820412 * sp[31] + 8.956685895029636 * sp[34] + 2.592724864350712 * sp[35] + 5.421151989096849 * sp[29] + -0.9428090415821075 * sp[32] + -3.299831645537248 * sp[28] + 1.649915822768607 * sp[29] + -1.178511301977577 * sp[26] + 3.771236166328315 * sp[27] + -3.29983164553729 * sp[31] + -3.299831645537272 * sp[32] + -6.128258770283466 * sp[27] + -3.771236166328296 * sp[30];
    A[28] = 7.794228634059952 * sp[33] + 1.732050807568857 * sp[34] + 1.73205080756888 * sp[28] + -3.464101615137752 * sp[31] + -2.598076211353306 * sp[34] + -0.4330127018921415 * sp[35] + -5.629165124598764 * sp[29] + -3.464101615137686 * sp[32] + 2.598076211353317 * sp[28] + -2.165063509461183 * sp[29] + 13.42339375865884 * sp[26] + 8.660254037844366 * sp[27] + 2.598076211353361 * sp[31] + 2.598076211353383 * sp[32] + -0.8660254037845294 * sp[27] + -5.196152422706595 * sp[30];
    A[29] = -20.83333333333338 * sp[33] + -6.666666666666711 * sp[34] + -12.66666666666666 * sp[28] + 0.3333333333333607 * sp[31] + 15.83333333333339 * sp[34] + 4.583333333333399 * sp[35] + 11.58333333333335 * sp[29] + 0.3333333333335378 * sp[32] + -5.833333333333378 * sp[28] + 2.916666666666654 * sp[29] + -10.08333333333341 * sp[26] + -1.333333333333364 * sp[27] + -5.833333333333443 * sp[31] + -5.833333333333412 * sp[32] + 2.166666666666622 * sp[27] + 13.33333333333324 * sp[30];
    A[30] = -0.0333333333333326 * sp[33] + 0.4416666666666682 * sp[34] + -0.1916666666666653 * sp[28] + -0.1916666666666679 * sp[31] + -0.8916666666666662 * sp[34] + 1.275000000000003 * sp[35] + -0.7916666666666691 * sp[29] + -0.1916666666666727 * sp[32] + -0.1916666666666674 * sp[28] + -0.7916666666666761 * sp[29] + 1.275000000000012 * sp[26] + 0.4416666666666705 * sp[27] + -0.1916666666666644 * sp[31] + -0.1916666666666623 * sp[32] + -0.8916666666666719 * sp[27] + -0.0333333333333321 * sp[30];
    A[31] = 0.8166666666666691 * sp[33] + -0.716666666666669 * sp[34] + 0.2166666666666683 * sp[28] + 0.2166666666666717 * sp[31] + 2.783333333333344 * sp[34] + -3.466666666666674 * sp[35] + 1.666666666666675 * sp[29] + 0.21666666666667 * sp[32] + -0.6166666666666745 * sp[28] + sp[29] + -0.8000000000000113 * sp[26] + 0.2833333333333354 * sp[27] + -0.6166666666666739 * sp[31] + -0.6166666666666744 * sp[32] + 1.116666666666669 * sp[27] + -2.016666666666675 * sp[30];
    A[32] = 0.6333333333333329 * sp[33] + 1.691666666666668 * sp[34] + -0.6083333333333364 * sp[28] + -0.6083333333333354 * sp[31] + 1.691666666666668 * sp[34] + 6.191666666666682 * sp[35] + -1.875000000000012 * sp[29] + -0.6083333333333313 * sp[32] + -0.6083333333333364 * sp[28] + -1.875000000000012 * sp[29] + 0.8583333333333426 * sp[26] + 0.3583333333333348 * sp[27] + -0.6083333333333354 * sp[31] + -0.6083333333333313 * sp[32] + 0.3583333333333348 * sp[27] + 2.633333333333345 * sp[30];
    A[33] = -1.008333333333336 * sp[33] + -1.150000000000002 * sp[34] + -1.116666666666667 * sp[28] + -1.15 * sp[31] + -2.191666666666678 * sp[34] + -3.170833333333345 * sp[35] + -1.154166666666673 * sp[29] + -2.133333333333341 * sp[32] + 1.108333333333342 * sp[28] + 1.479166666666679 * sp[29] + 0.3625000000000076 * sp[26] + 0.7333333333333423 * sp[27] + 1.108333333333338 * sp[31] + 1.108333333333333 * sp[32] + 1.108333333333342 * sp[27] + 1.09166666666667 * sp[30];
    A[34] = 1.266666666666669 * sp[33] + 2.133333333333337 * sp[34] + 0.8999999999999972 * sp[28] + 2.133333333333331 * sp[31] + 3.383333333333344 * sp[34] + 7.258333333333354 * sp[35] + 1.058333333333332 * sp[29] + 4.933333333333339 * sp[32] + -1.216666666666676 * sp[28] + -2.375000000000016 * sp[29] + -0.3083333333333373 * sp[26] + -1.466666666666678 * sp[27] + -1.216666666666673 * sp[31] + -1.216666666666668 * sp[32] + -1.216666666666675 * sp[27] + -2.600000000000015 * sp[30];
    A[35] = 0.4083333333333349 * sp[33] + -0.9833333333333359 * sp[34] + 0.716666666666669 * sp[28] + -0.9833333333333375 * sp[31] + 1.391666666666673 * sp[34] + -4.295833333333346 * sp[35] + 2.887500000000011 * sp[29] + -2.800000000000012 * sp[32] + -0.3083333333333377 * sp[28] + 1.187500000000011 * sp[29] + -0.7625000000000091 * sp[26] + 0.733333333333346 * sp[27] + -0.3083333333333373 * sp[31] + -0.3083333333333388 * sp[32] + -0.308333333333337 * sp[27] + 1.508333333333335 * sp[30];
    A[36] = -0.5083333333333313 * sp[33] + -0.691666666666662 * sp[34] + -0.6916666666666689 * sp[28] + -0.6916666666666671 * sp[31] + 0.2666666666666662 * sp[34] + 1.095833333333344 * sp[35] + -1.520833333333345 * sp[29] + -0.6916666666666678 * sp[32] + 0.4666666666666741 * sp[28] + 0.1125000000000016 * sp[29] + 1.295833333333345 * sp[26] + 0.9416666666666731 * sp[27] + 0.6500000000000032 * sp[31] + 2.283333333333358 * sp[32] + 0.6500000000000008 * sp[27] + 1.59166666666668 * sp[30];
    A[37] = 0.5999999999999979 * sp[33] + 0.3833333333333337 * sp[34] + 0.3833333333333322 * sp[28] + 0.3833333333333334 * sp[31] + 0.1333333333333372 * sp[34] + -0.4416666666666603 * sp[35] + 0.9583333333333387 * sp[29] + 0.3833333333333396 * sp[32] + -0.933333333333347 * sp[28] + -0.1416666666666715 * sp[29] + -1.675000000000014 * sp[26] + -0.8833333333333395 * sp[27] + 0.5333333333333323 * sp[31] + 0.09999999999999032 * sp[32] + 0.5333333333333397 * sp[27] + 0.0666666666666621 * sp[30];
    A[38] = -0.09166666666666737 * sp[33] + -0.1083333333333411 * sp[34] + -0.1083333333333336 * sp[28] + -0.1083333333333371 * sp[31] + -0.4000000000000052 * sp[34] + 0.6374999999999894 * sp[35] + -1.145833333333339 * sp[29] + -0.1083333333333378 * sp[32] + 0.4666666666666738 * sp[28] + -0.5124999999999983 * sp[29] + 0.8375000000000095 * sp[26] + -0.1416666666666683 * sp[27] + -1.183333333333334 * sp[31] + 2.116666666666677 * sp[32] + -1.183333333333337 * sp[27] + 1.00833333333334 * sp[30];
    A[39] = 4.006938426723785 * sp[33] + 5.185449728701362 * sp[34] + -0.471404520791021 * sp[28] + -0.471404520791016 * sp[31] + 10.13519719700724 * sp[34] + 7.660323462854284 * sp[35] + 2.003469213361899 * sp[29] + -0.4714045207910388 * sp[32] + -4.006938426723808 * sp[28] + -3.181980515339492 * sp[29] + 2.474873734152924 * sp[26] + 3.299831645537244 * sp[27] + -4.006938426723797 * sp[31] + -16.73486048808169 * sp[32] + 1.649915822768599 * sp[27] + -5.892556509887909 * sp[30];
    A[40] = -0.5773502691896065 * sp[33] + -0.7216878364869905 * sp[34] + -3.319764047840347 * sp[28] + -3.319764047840328 * sp[31] + 4.474464586219592 * sp[34] + 4.041451884327437 * sp[35] + -2.88675134594816 * sp[29] + -3.319764047840351 * sp[32] + -0.7216878364870318 * sp[28] + 6.928203230275551 * sp[26] + 7.649891066762591 * sp[27] + -0.7216878364870132 * sp[31] + -5.051814855409162 * sp[32] + 6.206515393788476 * sp[27] + -0.5773502691895818 * sp[30];
    A[41] = 4.833333333333332 * sp[33] + 2.416666666666655 * sp[34] + -4.08333333333336 * sp[28] + -4.083333333333346 * sp[31] + 14.9166666666667 * sp[34] + 22.91666666666669 * sp[35] + -12.08333333333342 * sp[29] + -4.083333333333306 * sp[32] + -4.083333333333356 * sp[28] + -5.749999999999996 * sp[29] + 3.250000000000041 * sp[26] + 1.583333333333337 * sp[27] + -4.08333333333336 * sp[31] + 11.41666666666676 * sp[32] + 4.916666666666694 * sp[27] + 19.83333333333342 * sp[30];
    A[42] = -5.892556509887905 * sp[33] + -4.006938426723767 * sp[34] + 0.235702260395519 * sp[28] + 1.649915822768625 * sp[31] + -17.44196726926823 * sp[34] + -10.724452847996 * sp[35] + -5.067598598503582 * sp[29] + 1.649915822768649 * sp[32] + 5.185449728701392 * sp[28] + 3.889087296526019 * sp[29] + -1.76776695296638 * sp[26] + -3.064129385141757 * sp[27] + 5.185449728701384 * sp[31] + 5.185449728701371 * sp[32] + -0.4714045207910269 * sp[27] + -1.649915822768611 * sp[30];
    A[43] = -3.897114317029966 * sp[33] + -3.031088913245543 * sp[34] + -3.031088913245549 * sp[28] + -0.4330127018922441 * sp[31] + -5.196152422706612 * sp[34] + -4.113620667976112 * sp[35] + -1.515544456622847 * sp[29] + -0.4330127018922686 * sp[32] + 5.19615242270665 * sp[28] + 5.412658773652797 * sp[29] + -2.3815698604072 * sp[26] + -2.165063509461074 * sp[27] + 5.19615242270663 * sp[31] + 5.196152422706616 * sp[32] + -1.732050807568825 * sp[27] + 0.4330127018921925 * sp[30];
    A[44] = -10.41666666666668 * sp[33] + -7.083333333333331 * sp[34] + -4.083333333333327 * sp[28] + -0.5833333333333133 * sp[31] + -30.83333333333342 * sp[34] + -18.95833333333338 * sp[35] + -12.45833333333335 * sp[29] + -0.5833333333333821 * sp[32] + 9.166666666666748 * sp[28] + 6.875000000000018 * sp[29] + 3.37500000000005 * sp[26] + 1.083333333333331 * sp[27] + 9.166666666666728 * sp[31] + 9.166666666666707 * sp[32] + 0.1666666666666896 * sp[27] + -12.91666666666668 * sp[30];
    A[45] = -1.591666666666674 * sp[33] + -0.9416666666666764 * sp[34] + 0.6916666666666702 * sp[28] + 0.6916666666666682 * sp[31] + -0.6500000000000044 * sp[34] + -1.295833333333347 * sp[35] + 1.520833333333349 * sp[29] + 0.6916666666666724 * sp[32] + -2.283333333333347 * sp[28] + -0.1125000000000033 * sp[29] + -1.09583333333333 * sp[26] + 0.6916666666666682 * sp[27] + -0.6500000000000111 * sp[31] + -0.4666666666666739 * sp[32] + -0.2666666666666558 * sp[27] + 0.5083333333333397 * sp[30];
    A[46] = -0.06666666666667354 * sp[33] + 0.4666666666666763 * sp[34] + 0.03333333333332811 * sp[28] + 0.03333333333333321 * sp[31] + -0.9500000000000079 * sp[34] + 1.258333333333348 * sp[35] + -0.7083333333333471 * sp[29] + 0.03333333333333774 * sp[32] + 0.3166666666666668 * sp[28] + -0.1083333333333341 * sp[29] + 0.8583333333333297 * sp[26] + 0.03333333333332741 * sp[27] + -0.9499999999999991 * sp[31] + 0.6833333333333408 * sp[32] + 0.1166666666666569 * sp[27] + -0.1833333333333376 * sp[30];
    A[47] = -1.008333333333336 * sp[33] + -2.191666666666678 * sp[34] + 1.108333333333342 * sp[28] + 1.108333333333338 * sp[31] + -1.150000000000002 * sp[34] + -3.170833333333345 * sp[35] + 1.479166666666679 * sp[29] + 1.108333333333333 * sp[32] + -1.116666666666667 * sp[28] + -1.154166666666673 * sp[29] + 0.3625000000000076 * sp[26] + 1.108333333333342 * sp[27] + -1.15 * sp[31] + -2.133333333333341 * sp[32] + 0.7333333333333423 * sp[27] + 1.09166666666667 * sp[30];
    A[48] = 2.633333333333349 * sp[33] + 2.275000000000013 * sp[34] + 3.241666666666683 * sp[28] + 2.275000000000013 * sp[31] + 2.275000000000013 * sp[34] + 2.775000000000014 * sp[35] + 1.008333333333344 * sp[29] + 1.508333333333344 * sp[32] + 3.241666666666683 * sp[28] + 1.008333333333344 * sp[29] + 10.04166666666667 * sp[26] + 5.508333333333337 * sp[27] + 2.275000000000013 * sp[31] + 1.508333333333344 * sp[32] + 5.508333333333337 * sp[27] + 3.683333333333334 * sp[30];
    A[49] = -2.016666666666678 * sp[33] + -3.133333333333351 * sp[34] + -1.400000000000003 * sp[28] + -3.133333333333342 * sp[31] + -2.30000000000001 * sp[34] + -4.216666666666684 * sp[35] + -0.6833333333333358 * sp[29] + -2.600000000000006 * sp[32] + -2.23333333333334 * sp[28] + -1.683333333333348 * sp[29] + -5.083333333333322 * sp[26] + -7.933333333333328 * sp[27] + -2.300000000000005 * sp[31] + -2.766666666666679 * sp[32] + -3.433333333333324 * sp[27] + -5.866666666666662 * sp[30];
    A[50] = -0.03333333333333846 * sp[33] + 0.8583333333333434 * sp[34] + 0.1583333333333287 * sp[28] + 0.8583333333333459 * sp[31] + -0.4750000000000052 * sp[34] + 1.69166666666668 * sp[35] + -1.075000000000009 * sp[29] + 1.091666666666682 * sp[32] + 0.1583333333333309 * sp[28] + 0.2583333333333342 * sp[29] + 1.625000000000001 * sp[26] + 2.424999999999997 * sp[27] + -0.4750000000000007 * sp[31] + 1.091666666666674 * sp[32] + -0.2416666666666664 * sp[27] + 2.183333333333337 * sp[30];
    A[51] = 1.50833333333334 * sp[33] + 1.81666666666667 * sp[34] + 1.816666666666677 * sp[28] + 1.816666666666674 * sp[31] + 0.775000000000009 * sp[34] + 0.3208333333333323 * sp[35] + 2.270833333333349 * sp[29] + 1.816666666666674 * sp[32] + 4.308333333333333 * sp[28] + 7.504166666666667 * sp[29] + 0.3208333333333441 * sp[26] + 1.816666666666676 * sp[27] + 2.591666666666668 * sp[31] + 4.308333333333327 * sp[32] + 0.7750000000000121 * sp[27] + 1.508333333333341 * sp[30];
    A[52] = -2.600000000000013 * sp[33] + -1.38333333333334 * sp[34] + -1.383333333333339 * sp[28] + -1.383333333333336 * sp[31] + -1.133333333333353 * sp[34] + -0.2250000000000092 * sp[35] + -2.291666666666685 * sp[29] + -1.383333333333342 * sp[32] + -7.533333333333339 * sp[28] + -5.258333333333332 * sp[29] + 0.9416666666666571 * sp[26] + -1.383333333333335 * sp[27] + -3.933333333333346 * sp[31] + -2.86666666666667 * sp[32] + 0.03333333333331773 * sp[27] + -1.016666666666674 * sp[30];
    A[53] = 1.091666666666676 * sp[33] + -0.01666666666666239 * sp[34] + -0.01666666666666383 * sp[28] + -0.01666666666666805 * sp[31] + 0.3583333333333458 * sp[34] + -0.3874999999999967 * sp[35] + 0.7291666666666783 * sp[29] + -0.01666666666666897 * sp[32] + 3.225000000000008 * sp[28] + 0.9625 * sp[29] + -1.054166666666662 * sp[26] + -0.01666666666666514 * sp[27] + 1.34166666666668 * sp[31] + 0.5583333333333379 * sp[32] + -0.3083333333333234 * sp[27] + 0.09166666666667028 * sp[30];
    A[54] = -7.542472332656567 * sp[33] + -8.720983634634131 * sp[34] + 4.006938426723766 * sp[28] + 4.006938426723774 * sp[31] + -7.778174593052078 * sp[34] + -8.249579113843071 * sp[35] + 4.478342947514808 * sp[29] + 4.006938426723805 * sp[32] + -8.720983634634134 * sp[28] + -12.96362432175342 * sp[29] + -0.2357022603955117 * sp[26] + 4.006938426723756 * sp[27] + -7.778174593052062 * sp[31] + -11.07800623858926 * sp[32] + 0.2357022603955237 * sp[27] + 2.357022603955166 * sp[30];
    A[55] = -5.917840259193724 * sp[33] + 0.7216878364870065 * sp[34] + 11.98001808568477 * sp[28] + 11.98001808568477 * sp[31] + -0.8660254037844575 * sp[34] + -2.237232293109823 * sp[35] + 13.35122497501015 * sp[29] + 11.9800180856848 * sp[32] + -11.83568051838745 * sp[28] + 18.25870226312187 * sp[29] + 2.670244995002053 * sp[26] + 11.98001808568476 * sp[27] + -0.8660254037845507 * sp[31] + 10.96965511460282 * sp[32] + 4.041451884327421 * sp[27] + 8.804591605141825 * sp[30];
    A[56] = -3.583333333333337 * sp[33] + -4.916666666666666 * sp[34] + 6.583333333333393 * sp[28] + 6.583333333333365 * sp[31] + -7.000000000000011 * sp[34] + -7.70833333333332 * sp[35] + 7.291666666666721 * sp[29] + 6.583333333333316 * sp[32] + -2.666666666666638 * sp[28] + 4.458333333333293 * sp[29] + 5.458333333333379 * sp[26] + 6.583333333333411 * sp[27] + -6.999999999999977 * sp[31] + 2.166666666666625 * sp[32] + 6.166666666666707 * sp[27] + 6.916666666666685 * sp[30];
    A[57] = 5.892556509887938 * sp[33] + 7.542472332656519 * sp[34] + -10.84230397819378 * sp[28] + -5.185449728701403 * sp[31] + 9.192388155425162 * sp[34] + 8.367430244040806 * sp[35] + -4.360491817317081 * sp[29] + -5.185449728701428 * sp[32] + 5.421151989096872 * sp[28] + 5.067598598503622 * sp[29] + -18.9740319618391 * sp[26] + -5.185449728701371 * sp[27] + 9.192388155425121 * sp[31] + 5.8925565098879 * sp[32] + -6.835365551470034 * sp[27] + -4.006938426723815 * sp[30];
    A[58] = 16.88749537379662 * sp[33] + 9.526279441628885 * sp[34] + 9.526279441628889 * sp[28] + -1.732050807568834 * sp[31] + 11.69134295108995 * sp[34] + 10.60881119635945 * sp[35] + -0.6495190528382953 * sp[29] + -1.732050807568835 * sp[32] + 22.08364779650327 * sp[28] + 2.814582562299471 * sp[29] + 36.58957330989253 * sp[26] + -1.732050807568875 * sp[27] + 11.69134295108998 * sp[31] + 3.897114317030023 * sp[32] + 19.48557158514986 * sp[27] + 0.4330127018922201 * sp[30];
    A[59] = 10.41666666666675 * sp[33] + 13.33333333333336 * sp[34] + 0.3333333333333517 * sp[28] + 1.833333333333312 * sp[31] + 16.25000000000009 * sp[34] + 14.79166666666666 * sp[35] + 3.291666666666714 * sp[29] + 1.833333333333337 * sp[32] + 9.583333333333364 * sp[28] + 8.958333333333387 * sp[29] + 7.458333333333284 * sp[26] + 1.833333333333295 * sp[27] + 16.25000000000001 * sp[31] + 10.41666666666667 * sp[32] + 9.416666666666638 * sp[27] + 2.916666666666624 * sp[30];
    A[60] = -0.06666666666666399 * sp[33] + 0.8833333333333391 * sp[34] + -0.3833333333333339 * sp[28] + -0.3833333333333377 * sp[31] + -0.5333333333333314 * sp[34] + 1.675000000000007 * sp[35] + -0.958333333333337 * sp[29] + -0.3833333333333405 * sp[32] + -0.09999999999999531 * sp[28] + 0.1416666666666677 * sp[29] + 0.4416666666666665 * sp[26] + -0.3833333333333369 * sp[27] + -0.5333333333333315 * sp[31] + 0.9333333333333276 * sp[32] + -0.1333333333333316 * sp[27] + -0.6000000000000036 * sp[30];
    A[61] = 1.633333333333341 * sp[33] + -1.433333333333341 * sp[34] + 0.4333333333333383 * sp[28] + 0.4333333333333431 * sp[31] + 3.066666666666682 * sp[34] + -3.683333333333347 * sp[35] + 1.583333333333345 * sp[29] + 0.4333333333333394 * sp[32] + 1.199999999999998 * sp[28] + -0.2833333333333334 * sp[29] + -0.2166666666666636 * sp[26] + 0.4333333333333481 * sp[27] + 3.066666666666674 * sp[31] + -2.533333333333327 * sp[32] + 0.9333333333333438 * sp[27] + 1.200000000000022 * sp[30];
    A[62] = 1.266666666666669 * sp[33] + 3.383333333333344 * sp[34] + -1.216666666666676 * sp[28] + -1.216666666666673 * sp[31] + 2.133333333333337 * sp[34] + 7.258333333333354 * sp[35] + -2.375000000000016 * sp[29] + -1.216666666666668 * sp[32] + 0.8999999999999972 * sp[28] + 1.058333333333332 * sp[29] + -0.3083333333333373 * sp[26] + -1.216666666666675 * sp[27] + 2.133333333333331 * sp[31] + 4.933333333333339 * sp[32] + -1.466666666666678 * sp[27] + -2.600000000000015 * sp[30];
    A[63] = -2.016666666666678 * sp[33] + -2.30000000000001 * sp[34] + -2.23333333333334 * sp[28] + -2.300000000000005 * sp[31] + -3.133333333333351 * sp[34] + -4.216666666666684 * sp[35] + -1.683333333333348 * sp[29] + -2.766666666666679 * sp[32] + -1.400000000000003 * sp[28] + -0.6833333333333358 * sp[29] + -5.083333333333322 * sp[26] + -3.433333333333324 * sp[27] + -3.133333333333342 * sp[31] + -2.600000000000006 * sp[32] + -7.933333333333328 * sp[27] + -5.866666666666662 * sp[30];
    A[64] = 2.533333333333343 * sp[33] + 4.266666666666683 * sp[34] + 1.799999999999999 * sp[28] + 4.266666666666672 * sp[31] + 4.266666666666683 * sp[34] + 8.766666666666698 * sp[35] + 1.366666666666669 * sp[29] + 5.866666666666681 * sp[32] + 1.799999999999999 * sp[28] + 1.366666666666669 * sp[29] + 3.833333333333318 * sp[26] + 5.866666666666652 * sp[27] + 4.266666666666672 * sp[31] + 5.866666666666681 * sp[32] + 5.866666666666652 * sp[27] + 11.73333333333333 * sp[30];
    A[65] = 0.8166666666666713 * sp[33] + -1.966666666666676 * sp[34] + 1.433333333333341 * sp[28] + -1.96666666666668 * sp[31] + 1.533333333333342 * sp[34] + -4.716666666666685 * sp[35] + 3.150000000000015 * sp[29] + -3.100000000000023 * sp[32] + 0.5999999999999996 * sp[28] + -0.5166666666666659 * sp[29] + 0.4166666666666663 * sp[26] + -2.43333333333333 * sp[27] + 1.533333333333338 * sp[31] + -3.266666666666666 * sp[32] + 2.066666666666676 * sp[27] + -5.866666666666669 * sp[30];
    A[66] = -1.016666666666667 * sp[33] + -1.383333333333329 * sp[34] + -1.383333333333342 * sp[28] + -1.383333333333339 * sp[31] + 0.03333333333333016 * sp[34] + 0.9416666666666731 * sp[35] + -2.291666666666682 * sp[29] + -1.383333333333338 * sp[32] + -2.866666666666658 * sp[28] + -5.258333333333319 * sp[29] + -0.2250000000000035 * sp[26] + -1.383333333333336 * sp[27] + -3.933333333333323 * sp[31] + -7.533333333333327 * sp[32] + -1.13333333333334 * sp[27] + -2.600000000000009 * sp[30];
    A[67] = 1.200000000000003 * sp[33] + 0.7666666666666708 * sp[34] + 0.7666666666666693 * sp[28] + 0.7666666666666704 * sp[31] + 0.2666666666666769 * sp[34] + -0.3833333333333234 * sp[35] + 1.416666666666673 * sp[29] + 0.7666666666666744 * sp[32] + 3.733333333333324 * sp[28] + 3.016666666666661 * sp[29] + -0.3833333333333312 * sp[26] + 0.7666666666666671 * sp[27] + 5.866666666666658 * sp[31] + 3.73333333333333 * sp[32] + 0.2666666666666666 * sp[27] + 1.2 * sp[30];
    A[68] = -0.1833333333333373 * sp[33] + -0.2166666666666817 * sp[34] + -0.216666666666669 * sp[28] + -0.2166666666666739 * sp[31] + -0.3000000000000098 * sp[34] + 0.5249999999999837 * sp[35] + -1.041666666666674 * sp[29] + -0.2166666666666729 * sp[32] + -0.8666666666666667 * sp[28] + -1.008333333333346 * sp[29] + 0.358333333333331 * sp[26] + -0.216666666666677 * sp[27] + -1.933333333333337 * sp[31] + -1.533333333333355 * sp[32] + -0.4666666666666734 * sp[27] + -0.6000000000000146 * sp[30];
    A[69] = 8.013876853447586 * sp[33] + 10.37089945740275 * sp[34] + -0.94280904158205 * sp[28] + -0.9428090415820432 * sp[31] + 13.19932658214897 * sp[34] + 11.78511301977584 * sp[35] + 0.4714045207910533 * sp[29] + -0.942809041582065 * sp[32] + 5.65685424949239 * sp[28] + 11.78511301977581 * sp[29] + 0.4714045207910416 * sp[26] + -0.9428090415820201 * sp[27] + 13.19932658214893 * sp[31] + 24.51303508113373 * sp[32] + 1.885618083164168 * sp[27];
    A[70] = -1.154700538379211 * sp[33] + -1.443375672973992 * sp[34] + -6.639528095680718 * sp[28] + -6.639528095680688 * sp[31] + 4.618802153517041 * sp[34] + 5.917840259193735 * sp[35] + -7.938566201357391 * sp[29] + -6.639528095680706 * sp[32] + -5.196152422706561 * sp[28] + -14.86676943163276 * sp[29] + -1.010362971081842 * sp[26] + -6.639528095680648 * sp[27] + 4.618802153517112 * sp[31] + -16.16580753730941 * sp[32] + -2.309401076758472 * sp[27] + -10.39230484541321 * sp[30];
    A[71] = 9.666666666666684 * sp[33] + 4.83333333333332 * sp[34] + -8.166666666666735 * sp[28] + -8.166666666666707 * sp[31] + 17.33333333333337 * sp[34] + 24.58333333333335 * sp[35] + -15.41666666666678 * sp[29] + -8.166666666666663 * sp[32] + 6.999999999999976 * sp[28] + -11.41666666666666 * sp[29] + -3.416666666666698 * sp[26] + -8.166666666666723 * sp[27] + 17.33333333333333 * sp[31] + -2.666666666666667 * sp[32] + -10.66666666666676 * sp[27] + -18.00000000000011 * sp[30];
    A[72] = -11.78511301977584 * sp[33] + -8.013876853447552 * sp[34] + 0.4714045207910518 * sp[28] + 3.299831645537263 * sp[31] + -20.74179891480548 * sp[34] + -14.3778378841265 * sp[35] + -3.064129385141686 * sp[29] + 3.299831645537282 * sp[32] + -8.485281374238555 * sp[28] + -3.064129385141705 * sp[29] + 2.592724864350696 * sp[26] + 3.299831645537234 * sp[27] + -20.74179891480541 * sp[31] + -9.428090415820673 * sp[32] + 1.885618083164132 * sp[27] + 5.65685424949238 * sp[30];
    A[73] = -7.79422863405996 * sp[33] + -6.062177826491106 * sp[34] + -6.06217782649111 * sp[28] + -0.8660254037844821 * sp[31] + -10.39230484541326 * sp[34] + -8.227241335952209 * sp[35] + -3.031088913245626 * sp[29] + -0.8660254037844938 * sp[32] + -5.196152422706636 * sp[28] + -1.299038105676673 * sp[29] + -16.88749537379652 * sp[26] + -0.8660254037844624 * sp[27] + -10.39230484541323 * sp[31] + -3.464101615137745 * sp[32] + -17.32050807568877 * sp[27] + 3.464101615137751 * sp[30];
    A[74] = -20.83333333333341 * sp[33] + -14.16666666666669 * sp[34] + -8.16666666666667 * sp[28] + -1.166666666666631 * sp[31] + -36.66666666666681 * sp[34] + -25.41666666666672 * sp[35] + -12.4166666666667 * sp[29] + -1.166666666666671 * sp[32] + -14.99999999999997 * sp[28] + -5.416666666666662 * sp[29] + -12.41666666666661 * sp[26] + -1.166666666666606 * sp[27] + -36.66666666666671 * sp[31] + -16.66666666666674 * sp[32] + -24.66666666666664 * sp[27] + 10.00000000000008 * sp[30];
    A[75] = -1.008333333333331 * sp[33] + 0.1416666666666681 * sp[34] + 0.1083333333333306 * sp[28] + 0.1083333333333285 * sp[31] + 1.183333333333332 * sp[34] + -0.8375000000000032 * sp[35] + 1.145833333333341 * sp[29] + 0.1083333333333399 * sp[32] + -2.11666666666667 * sp[28] + 0.5125000000000046 * sp[29] + -0.6375000000000119 * sp[26] + 0.1083333333333242 * sp[27] + 1.183333333333332 * sp[31] + -0.4666666666666651 * sp[32] + 0.400000000000009 * sp[27] + 0.09166666666667424 * sp[30];
    A[76] = 1.266666666666668 * sp[33] + -0.8666666666666686 * sp[34] + 0.366666666666669 * sp[28] + 0.3666666666666728 * sp[31] + -2.116666666666674 * sp[34] + 3.008333333333335 * sp[35] + -1.95833333333334 * sp[29] + 0.3666666666666709 * sp[32] + 2.483333333333339 * sp[28] + -2.025000000000007 * sp[29] + 1.275000000000011 * sp[26] + 0.3666666666666739 * sp[27] + -2.116666666666675 * sp[31] + 1.849999999999992 * sp[32] + -1.050000000000008 * sp[27] + -1.016666666666665 * sp[30];
    A[77] = 0.4083333333333349 * sp[33] + 1.391666666666673 * sp[34] + -0.3083333333333377 * sp[28] + -0.3083333333333373 * sp[31] + -0.9833333333333359 * sp[34] + -4.295833333333346 * sp[35] + 1.187500000000011 * sp[29] + -0.3083333333333388 * sp[32] + 0.716666666666669 * sp[28] + 2.887500000000011 * sp[29] + -0.7625000000000091 * sp[26] + -0.308333333333337 * sp[27] + -0.9833333333333375 * sp[31] + -2.800000000000012 * sp[32] + 0.733333333333346 * sp[27] + 1.508333333333335 * sp[30];
    A[78] = -0.03333333333333846 * sp[33] + -0.4750000000000052 * sp[34] + 0.1583333333333309 * sp[28] + -0.4750000000000007 * sp[31] + 0.8583333333333434 * sp[34] + 1.69166666666668 * sp[35] + 0.2583333333333342 * sp[29] + 1.091666666666674 * sp[32] + 0.1583333333333287 * sp[28] + -1.075000000000009 * sp[29] + 1.625000000000001 * sp[26] + -0.2416666666666664 * sp[27] + 0.8583333333333459 * sp[31] + 1.091666666666682 * sp[32] + 2.424999999999997 * sp[27] + 2.183333333333337 * sp[30];
    A[79] = 0.8166666666666713 * sp[33] + 1.533333333333342 * sp[34] + 0.5999999999999996 * sp[28] + 1.533333333333338 * sp[31] + -1.966666666666676 * sp[34] + -4.716666666666685 * sp[35] + -0.5166666666666659 * sp[29] + -3.266666666666666 * sp[32] + 1.433333333333341 * sp[28] + 3.150000000000015 * sp[29] + 0.4166666666666663 * sp[26] + 2.066666666666676 * sp[27] + -1.96666666666668 * sp[31] + -3.100000000000023 * sp[32] + -2.43333333333333 * sp[27] + -5.866666666666669 * sp[30];
    A[80] = 0.6333333333333334 * sp[33] + -1.058333333333337 * sp[34] + 1.241666666666669 * sp[28] + -1.058333333333337 * sp[31] + -1.058333333333337 * sp[34] + 3.441666666666672 * sp[35] + -2.325000000000009 * sp[29] + 2.174999999999998 * sp[32] + 1.241666666666669 * sp[28] + -2.325000000000009 * sp[29] + 2.708333333333342 * sp[26] + -1.825000000000011 * sp[27] + -1.058333333333337 * sp[31] + 2.174999999999998 * sp[32] + -1.825000000000011 * sp[27] + 3.683333333333318 * sp[30];
    A[81] = 0.09166666666666626 * sp[33] + -0.01666666666666522 * sp[34] + -0.01666666666667224 * sp[28] + -0.01666666666667088 * sp[31] + -0.3083333333333304 * sp[34] + -1.05416666666668 * sp[35] + 0.7291666666666803 * sp[29] + -0.01666666666666516 * sp[32] + 0.5583333333333311 * sp[28] + 0.9625000000000049 * sp[29] + -0.3875000000000109 * sp[26] + -0.0166666666666726 * sp[27] + 1.341666666666667 * sp[31] + 3.224999999999994 * sp[32] + 0.3583333333333494 * sp[27] + 1.091666666666679 * sp[30];
    A[82] = -0.5999999999999975 * sp[33] + -0.2166666666666638 * sp[34] + -0.2166666666666621 * sp[28] + -0.2166666666666609 * sp[31] + -0.4666666666666693 * sp[34] + 0.3583333333333281 * sp[35] + -1.041666666666679 * sp[29] + -0.2166666666666752 * sp[32] + -1.533333333333327 * sp[28] + -1.008333333333329 * sp[29] + 0.5250000000000146 * sp[26] + -0.2166666666666557 * sp[27] + -1.933333333333332 * sp[31] + -0.866666666666672 * sp[32] + -0.3000000000000144 * sp[27] + -0.183333333333346 * sp[30];
    A[83] = 0.5083333333333311 * sp[33] + -0.1833333333333412 * sp[34] + -0.1833333333333355 * sp[28] + -0.1833333333333392 * sp[31] + 0.7750000000000004 * sp[34] + -1.012500000000001 * sp[35] + 1.604166666666673 * sp[29] + -0.1833333333333342 * sp[32] + 0.9749999999999961 * sp[28] + 0.1708333333333215 * sp[29] + -1.01250000000001 * sp[26] + -0.1833333333333415 * sp[27] + 0.5916666666666659 * sp[31] + 0.9749999999999956 * sp[32] + 0.7750000000000073 * sp[27] + 0.5083333333333344 * sp[30];
    A[84] = 1.885618083164145 * sp[33] + 3.064129385141731 * sp[34] + 1.649915822768606 * sp[28] + 1.649915822768613 * sp[31] + -5.421151989096902 * sp[34] + -1.178511301977566 * sp[35] + -2.592724864350662 * sp[29] + 1.649915822768649 * sp[32] + 3.064129385141731 * sp[28] + 3.535533905932768 * sp[29] + 2.121320343559633 * sp[26] + 1.649915822768601 * sp[27] + -5.421151989096912 * sp[31] + -13.43502884254442 * sp[32] + -2.121320343559629 * sp[27] + -2.357022603955117 * sp[30];
    A[85] = -4.474464586219583 * sp[33] + -0.7216878364869957 * sp[34] + 1.876388374866255 * sp[28] + 1.876388374866275 * sp[31] + -3.752776749732468 * sp[34] + -0.0721687836487232 * sp[35] + -1.804219591217516 * sp[29] + 1.876388374866328 * sp[32] + -8.948929172439215 * sp[28] + 0.2165063509461634 * sp[29] + 1.94855715851494 * sp[26] + 1.876388374866259 * sp[27] + -3.752776749732456 * sp[31] + 5.196152422706652 * sp[32] + -1.732050807568806 * sp[27] + 1.587713240271566 * sp[30];
    A[86] = 5.583333333333347 * sp[33] + 0.9166666666666734 * sp[34] + -2.583333333333362 * sp[28] + -2.583333333333352 * sp[31] + -10.33333333333336 * sp[34] + -18.95833333333335 * sp[35] + 6.041666666666732 * sp[29] + -2.583333333333388 * sp[32] + 10.6666666666667 * sp[28] + 4.874999999999998 * sp[29] + -4.125000000000043 * sp[26] + -2.583333333333337 * sp[27] + -10.33333333333337 * sp[31] + 0.5 * sp[32] + 4.500000000000076 * sp[27] + 11.08333333333333 * sp[30];
    A[87] = -5.892556509887912 * sp[33] + -1.885618083164143 * sp[34] + -6.128258770283393 * sp[28] + -0.4714045207910164 * sp[31] + 11.54941075938032 * sp[34] + 4.831896338108117 * sp[35] + 6.246109900481162 * sp[29] + -0.4714045207910638 * sp[32] + -11.07800623858928 * sp[28] + -3.181980515339478 * sp[29] + -13.08147545195113 * sp[26] + -0.4714045207909954 * sp[27] + 11.54941075938033 * sp[31] + 3.53553390593282 * sp[32] + 4.949747468305826 * sp[27] + -1.649915822768623 * sp[30];
    A[88] = 3.897114317029963 * sp[33] + 0.8660254037844216 * sp[34] + 0.866025403784433 * sp[28] + -1.732050807568873 * sp[31] + -1.299038105676662 * sp[34] + -0.2165063509460583 * sp[35] + -2.814582562299342 * sp[29] + -1.73205080756882 * sp[32] + 9.093266739736631 * sp[28] + 0.6495190528382957 * sp[29] + 8.443747686898302 * sp[26] + -1.732050807568874 * sp[27] + -1.29903810567664 * sp[31] + -0.4330127018921748 * sp[32] + -2.165063509461009 * sp[27] + -3.897114317029959 * sp[30];
    A[89] = -10.41666666666669 * sp[33] + -3.333333333333361 * sp[34] + -6.333333333333327 * sp[28] + 0.1666666666666783 * sp[31] + 20.41666666666674 * sp[34] + 8.541666666666739 * sp[35] + 12.04166666666668 * sp[29] + 0.1666666666668162 * sp[32] + -19.58333333333339 * sp[28] + -5.625000000000025 * sp[29] + -12.12500000000003 * sp[26] + 0.166666666666679 * sp[27] + 20.41666666666676 * sp[31] + 6.250000000000139 * sp[32] + 15.25 * sp[27] + -12.91666666666648 * sp[30];
    A[90] = -1.091666666666674 * sp[33] + -0.7333333333333449 * sp[34] + 2.133333333333349 * sp[28] + 1.150000000000002 * sp[31] + -1.108333333333342 * sp[34] + -0.3624999999999964 * sp[35] + 1.154166666666657 * sp[29] + 1.116666666666661 * sp[32] + -1.108333333333335 * sp[28] + -1.479166666666683 * sp[29] + 3.170833333333348 * sp[26] + 1.150000000000001 * sp[27] + -1.108333333333335 * sp[31] + -1.108333333333341 * sp[32] + 2.191666666666669 * sp[27] + 1.008333333333332 * sp[30];
    A[91] = 0.1833333333333353 * sp[33] + -0.1166666666666595 * sp[34] + -0.6833333333333474 * sp[28] + 0.9499999999999994 * sp[31] + -0.03333333333332741 * sp[34] + -0.8583333333333467 * sp[35] + 0.1083333333333332 * sp[29] + -0.316666666666692 * sp[32] + -0.03333333333334199 * sp[28] + 0.7083333333333501 * sp[29] + -1.258333333333349 * sp[26] + 0.9500000000000042 * sp[27] + -0.03333333333333932 * sp[31] + -0.03333333333333011 * sp[32] + -0.4666666666666727 * sp[27] + 0.06666666666665771 * sp[30];
    A[92] = -0.5083333333333313 * sp[33] + 0.2666666666666662 * sp[34] + 0.4666666666666741 * sp[28] + 0.6500000000000032 * sp[31] + -0.691666666666662 * sp[34] + 1.095833333333344 * sp[35] + 0.1125000000000016 * sp[29] + 2.283333333333358 * sp[32] + -0.6916666666666689 * sp[28] + -1.520833333333345 * sp[29] + 1.295833333333345 * sp[26] + 0.6500000000000008 * sp[27] + -0.6916666666666671 * sp[31] + -0.6916666666666678 * sp[32] + 0.9416666666666731 * sp[27] + 1.59166666666668 * sp[30];
    A[93] = 1.50833333333334 * sp[33] + 0.775000000000009 * sp[34] + 4.308333333333333 * sp[28] + 2.591666666666668 * sp[31] + 1.81666666666667 * sp[34] + 0.3208333333333323 * sp[35] + 7.504166666666667 * sp[29] + 4.308333333333327 * sp[32] + 1.816666666666677 * sp[28] + 2.270833333333349 * sp[29] + 0.3208333333333441 * sp[26] + 0.7750000000000121 * sp[27] + 1.816666666666674 * sp[31] + 1.816666666666674 * sp[32] + 1.816666666666676 * sp[27] + 1.508333333333341 * sp[30];
    A[94] = -1.016666666666667 * sp[33] + 0.03333333333333016 * sp[34] + -2.866666666666658 * sp[28] + -3.933333333333323 * sp[31] + -1.383333333333329 * sp[34] + 0.9416666666666731 * sp[35] + -5.258333333333319 * sp[29] + -7.533333333333327 * sp[32] + -1.383333333333342 * sp[28] + -2.291666666666682 * sp[29] + -0.2250000000000035 * sp[26] + -1.13333333333334 * sp[27] + -1.383333333333339 * sp[31] + -1.383333333333338 * sp[32] + -1.383333333333336 * sp[27] + -2.600000000000009 * sp[30];
    A[95] = 0.09166666666666626 * sp[33] + -0.3083333333333304 * sp[34] + 0.5583333333333311 * sp[28] + 1.341666666666667 * sp[31] + -0.01666666666666522 * sp[34] + -1.05416666666668 * sp[35] + 0.9625000000000049 * sp[29] + 3.224999999999994 * sp[32] + -0.01666666666667224 * sp[28] + 0.7291666666666803 * sp[29] + -0.3875000000000109 * sp[26] + 0.3583333333333494 * sp[27] + -0.01666666666667088 * sp[31] + -0.01666666666666516 * sp[32] + -0.0166666666666726 * sp[27] + 1.091666666666679 * sp[30];
    A[96] = 3.683333333333338 * sp[33] + 5.508333333333325 * sp[34] + 1.508333333333342 * sp[28] + 2.275000000000005 * sp[31] + 5.508333333333325 * sp[34] + 10.04166666666667 * sp[35] + 1.008333333333329 * sp[29] + 3.241666666666676 * sp[32] + 1.508333333333342 * sp[28] + 1.008333333333329 * sp[29] + 2.775000000000012 * sp[26] + 2.275000000000005 * sp[27] + 2.275000000000005 * sp[31] + 3.241666666666676 * sp[32] + 2.275000000000005 * sp[27] + 2.633333333333343 * sp[30];
    A[97] = -5.866666666666679 * sp[33] + -3.433333333333332 * sp[34] + -2.766666666666684 * sp[28] + -2.300000000000001 * sp[31] + -7.933333333333323 * sp[34] + -5.083333333333321 * sp[35] + -1.683333333333322 * sp[29] + -2.233333333333321 * sp[32] + -2.600000000000017 * sp[28] + -0.6833333333333369 * sp[29] + -4.216666666666682 * sp[26] + -2.300000000000002 * sp[27] + -3.133333333333339 * sp[31] + -1.400000000000001 * sp[32] + -3.133333333333335 * sp[27] + -2.016666666666663 * sp[30];
    A[98] = 2.183333333333342 * sp[33] + -0.2416666666666661 * sp[34] + 1.091666666666678 * sp[28] + -0.4750000000000026 * sp[31] + 2.424999999999999 * sp[34] + 1.625000000000021 * sp[35] + 0.258333333333329 * sp[29] + 0.1583333333333443 * sp[32] + 1.091666666666676 * sp[28] + -1.074999999999998 * sp[29] + 1.691666666666677 * sp[26] + -0.4750000000000058 * sp[27] + 0.8583333333333354 * sp[31] + 0.1583333333333471 * sp[32] + 0.8583333333333345 * sp[27] + -0.03333333333333117 * sp[30];
    A[99] = -4.006938426723785 * sp[33] + -6.835365551469964 * sp[34] + 5.892556509887903 * sp[28] + 9.192388155425117 * sp[31] + -5.18544972870135 * sp[34] + -18.97403196183914 * sp[35] + 5.067598598503555 * sp[29] + 5.421151989096755 * sp[32] + -5.185449728701394 * sp[28] + -4.360491817317067 * sp[29] + 8.367430244040811 * sp[26] + 9.192388155425133 * sp[27] + -5.185449728701381 * sp[31] + -10.84230397819381 * sp[32] + 7.542472332656494 * sp[27] + 5.892556509887857 * sp[30];
    A[100] = 2.742413778650671 * sp[33] + 17.89785834487833 * sp[34] + 10.96965511460291 * sp[28] + 19.91858428704211 * sp[31] + 0.721687836486856 * sp[34] + 24.75389279150507 * sp[35] + 9.165435523385248 * sp[29] + 19.34123401785238 * sp[32] + 0.7216878364870265 * sp[28] + 2.525907427704568 * sp[29] + 18.11436469582454 * sp[26] + 19.91858428704213 * sp[27] + 0.7216878364869892 * sp[31] + 5.051814855409172 * sp[32] + 16.31014510460693 * sp[27] + 17.46484564298618 * sp[30];
    A[101] = -1.083333333333299 * sp[33] + 12.16666666666668 * sp[34] + -1.833333333333313 * sp[28] + 2.000000000000028 * sp[31] + -2.416666666666612 * sp[34] + 27.95833333333339 * sp[35] + -2.041666666666628 * sp[29] + 14.33333333333354 * sp[32] + -2.416666666666675 * sp[28] + -2.208333333333306 * sp[29] + 1.791666666666719 * sp[26] + 2.000000000000006 * sp[27] + -2.416666666666664 * sp[31] + 8.083333333333428 * sp[32] + 1.58333333333338 * sp[27] + 9.416666666666774 * sp[30];
    A[102] = 2.357022603955144 * sp[33] + 0.2357022603954944 * sp[34] + -11.07800623858928 * sp[28] + -7.77817459305208 * sp[31] + 4.00693842672373 * sp[34] + -0.2357022603955068 * sp[35] + -12.9636243217534 * sp[29] + -8.720983634634075 * sp[32] + 4.00693842672381 * sp[28] + 4.478342947514786 * sp[29] + -8.249579113843067 * sp[26] + -7.778174593052103 * sp[27] + 4.006938426723792 * sp[31] + 4.006938426723764 * sp[32] + -8.720983634634093 * sp[27] + -7.542472332656555 * sp[30];
    A[103] = 10.39230484541331 * sp[33] + 7.361215932167806 * sp[34] + 7.361215932167699 * sp[28] + -6.495190528383238 * sp[31] + 11.69134295108996 * sp[34] + 6.062177826491077 * sp[35] + 12.99038105676654 * sp[29] + -8.227241335952156 * sp[32] + 11.69134295108995 * sp[28] + 12.99038105676667 * sp[29] + -7.794228634059924 * sp[26] + -6.495190528383207 * sp[27] + 11.69134295108995 * sp[31] + 11.69134295108998 * sp[32] + -3.897114317029965 * sp[27] + -6.062177826491018 * sp[30];
    A[104] = 4.166666666666654 * sp[33] + 0.4166666666666359 * sp[34] + 8.41666666666667 * sp[28] + 2.749999999999962 * sp[31] + 7.083333333333274 * sp[34] + -0.4166666666666483 * sp[35] + 13.58333333333326 * sp[29] + -8.916666666666865 * sp[32] + 7.083333333333419 * sp[28] + 7.916666666666652 * sp[29] + 1.916666666666731 * sp[26] + 2.749999999999981 * sp[27] + 7.083333333333385 * sp[31] + 7.083333333333331 * sp[32] + 3.083333333333362 * sp[27] + -3.333333333333434 * sp[30];
    A[105] = 2.600000000000012 * sp[33] + 1.466666666666684 * sp[34] + -4.93333333333336 * sp[28] + -2.133333333333332 * sp[31] + 1.21666666666667 * sp[34] + 0.3083333333333411 * sp[35] + -1.058333333333332 * sp[29] + -0.8999999999999982 * sp[32] + 1.216666666666667 * sp[28] + 2.375000000000025 * sp[29] + -7.258333333333365 * sp[26] + -2.133333333333332 * sp[27] + 1.216666666666663 * sp[31] + 1.216666666666678 * sp[32] + -3.383333333333333 * sp[27] + -1.266666666666662 * sp[30];
    A[106] = -1.200000000000001 * sp[33] + -0.93333333333334 * sp[34] + 2.533333333333358 * sp[28] + -3.066666666666677 * sp[31] + -0.4333333333333304 * sp[34] + 0.2166666666666597 * sp[35] + 0.283333333333336 * sp[29] + -1.199999999999988 * sp[32] + -0.4333333333333272 * sp[28] + -1.583333333333353 * sp[29] + 3.683333333333363 * sp[26] + -3.066666666666682 * sp[27] + -0.4333333333333243 * sp[31] + -0.4333333333333446 * sp[32] + 1.43333333333334 * sp[27] + -1.633333333333328 * sp[30];
    A[107] = 0.5999999999999979 * sp[33] + 0.1333333333333372 * sp[34] + -0.933333333333347 * sp[28] + 0.5333333333333323 * sp[31] + 0.3833333333333337 * sp[34] + -0.4416666666666603 * sp[35] + -0.1416666666666715 * sp[29] + 0.09999999999999032 * sp[32] + 0.3833333333333322 * sp[28] + 0.9583333333333387 * sp[29] + -1.675000000000014 * sp[26] + 0.5333333333333397 * sp[27] + 0.3833333333333334 * sp[31] + 0.3833333333333396 * sp[32] + -0.8833333333333395 * sp[27] + 0.0666666666666621 * sp[30];
    A[108] = -2.600000000000013 * sp[33] + -1.133333333333353 * sp[34] + -7.533333333333339 * sp[28] + -3.933333333333346 * sp[31] + -1.38333333333334 * sp[34] + -0.2250000000000092 * sp[35] + -5.258333333333332 * sp[29] + -2.86666666666667 * sp[32] + -1.383333333333339 * sp[28] + -2.291666666666685 * sp[29] + 0.9416666666666571 * sp[26] + 0.03333333333331773 * sp[27] + -1.383333333333336 * sp[31] + -1.383333333333342 * sp[32] + -1.383333333333335 * sp[27] + -1.016666666666674 * sp[30];
    A[109] = 1.200000000000003 * sp[33] + 0.2666666666666769 * sp[34] + 3.733333333333324 * sp[28] + 5.866666666666658 * sp[31] + 0.7666666666666708 * sp[34] + -0.3833333333333234 * sp[35] + 3.016666666666661 * sp[29] + 3.73333333333333 * sp[32] + 0.7666666666666693 * sp[28] + 1.416666666666673 * sp[29] + -0.3833333333333312 * sp[26] + 0.2666666666666666 * sp[27] + 0.7666666666666704 * sp[31] + 0.7666666666666744 * sp[32] + 0.7666666666666671 * sp[27] + 1.2 * sp[30];
    A[110] = -0.5999999999999975 * sp[33] + -0.4666666666666693 * sp[34] + -1.533333333333327 * sp[28] + -1.933333333333332 * sp[31] + -0.2166666666666638 * sp[34] + 0.3583333333333281 * sp[35] + -1.008333333333329 * sp[29] + -0.866666666666672 * sp[32] + -0.2166666666666621 * sp[28] + -1.041666666666679 * sp[29] + 0.5250000000000146 * sp[26] + -0.3000000000000144 * sp[27] + -0.2166666666666609 * sp[31] + -0.2166666666666752 * sp[32] + -0.2166666666666557 * sp[27] + -0.183333333333346 * sp[30];
    A[111] = -5.866666666666679 * sp[33] + -7.933333333333323 * sp[34] + -2.600000000000017 * sp[28] + -3.133333333333339 * sp[31] + -3.433333333333332 * sp[34] + -5.083333333333321 * sp[35] + -0.6833333333333369 * sp[29] + -1.400000000000001 * sp[32] + -2.766666666666684 * sp[28] + -1.683333333333322 * sp[29] + -4.216666666666682 * sp[26] + -3.133333333333335 * sp[27] + -2.300000000000001 * sp[31] + -2.233333333333321 * sp[32] + -2.300000000000002 * sp[27] + -2.016666666666663 * sp[30];
    A[112] = 11.73333333333336 * sp[33] + 5.866666666666662 * sp[34] + 5.866666666666697 * sp[28] + 4.266666666666662 * sp[31] + 5.866666666666662 * sp[34] + 3.833333333333326 * sp[35] + 1.366666666666667 * sp[29] + 1.799999999999992 * sp[32] + 5.866666666666697 * sp[28] + 1.366666666666667 * sp[29] + 8.766666666666698 * sp[26] + 4.266666666666664 * sp[27] + 4.266666666666662 * sp[31] + 1.799999999999992 * sp[32] + 4.266666666666664 * sp[27] + 2.533333333333322 * sp[30];
    A[113] = -5.86666666666668 * sp[33] + 2.06666666666668 * sp[34] + -3.266666666666687 * sp[28] + 1.533333333333349 * sp[31] + -2.43333333333333 * sp[34] + 0.4166666666666573 * sp[35] + -0.5166666666666664 * sp[29] + 0.5999999999999961 * sp[32] + -3.100000000000013 * sp[28] + 3.150000000000007 * sp[29] + -4.71666666666669 * sp[26] + 1.533333333333351 * sp[27] + -1.966666666666662 * sp[31] + 1.433333333333324 * sp[32] + -1.966666666666668 * sp[27] + 0.8166666666666684 * sp[30];
    A[114] = 5.65685424949241 * sp[33] + 1.885618083164137 * sp[34] + -9.428090415820648 * sp[28] + -20.74179891480541 * sp[31] + 3.299831645537245 * sp[34] + 2.592724864350722 * sp[35] + -3.064129385141695 * sp[29] + -8.485281374238516 * sp[32] + 3.299831645537244 * sp[28] + -3.064129385141716 * sp[29] + -14.37783788412647 * sp[26] + -20.74179891480543 * sp[27] + 3.299831645537242 * sp[31] + 0.4714045207910678 * sp[32] + -8.013876853447512 * sp[27] + -11.78511301977574 * sp[30];
    A[115] = 10.39230484541331 * sp[33] + -30.02221399786047 * sp[34] + -16.16580753730955 * sp[28] + -36.9504172281361 * sp[31] + -1.443375672974021 * sp[34] + -19.19689645055495 * sp[35] + -5.340489990004031 * sp[29] + -15.58845726811983 * sp[32] + -1.443375672974109 * sp[28] + -12.26869322027949 * sp[29] + -26.12509968083059 * sp[26] + -36.95041722813611 * sp[27] + -1.443375672974081 * sp[31] + -10.10362971081836 * sp[32] + -15.29978213352505 * sp[27] + -21.93931022920571 * sp[30];
    A[116] = -2.000000000000055 * sp[33] + -2.666666666666659 * sp[34] + 5.333333333333291 * sp[28] + 9.333333333333304 * sp[31] + -0.1666666666666733 * sp[34] + -8.416666666666677 * sp[35] + 1.583333333333292 * sp[29] + 2.999999999999913 * sp[32] + -0.166666666666688 * sp[28] + 3.583333333333278 * sp[29] + 5.583333333333297 * sp[26] + 9.333333333333371 * sp[27] + -0.1666666666666621 * sp[31] + -1.166666666666719 * sp[32] + 1.833333333333284 * sp[27] + 3.666666666666613 * sp[30];
    A[117] = 1.885618083164134 * sp[34] + 24.5130350811337 * sp[28] + 13.19932658214897 * sp[31] + -0.942809041582076 * sp[34] + 0.4714045207910313 * sp[35] + 11.78511301977579 * sp[29] + 5.656854249492408 * sp[32] + -0.9428090415820773 * sp[28] + 0.4714045207910822 * sp[29] + 11.78511301977579 * sp[26] + 13.199326582149 * sp[27] + -0.9428090415820914 * sp[31] + -0.9428090415820432 * sp[32] + 10.37089945740265 * sp[27] + 8.013876853447583 * sp[30];
    A[118] = -20.78460969082661 * sp[33] + -10.3923048454134 * sp[34] + -10.39230484541325 * sp[28] + 17.32050807568867 * sp[31] + -10.39230484541329 * sp[34] + -3.464101615137805 * sp[35] + -17.32050807568876 * sp[29] + 3.464101615137671 * sp[32] + -10.39230484541328 * sp[28] + -17.32050807568892 * sp[29] + 24.24871130596428 * sp[26] + 17.32050807568863 * sp[27] + -10.39230484541325 * sp[31] + -10.39230484541332 * sp[32] + 3.464101615137735 * sp[27] + 7.794228634059813 * sp[30];
    A[119] = 3.333333333333331 * sp[34] + -12.6666666666667 * sp[28] + -4.66666666666667 * sp[31] + -1.6666666666667 * sp[34] + 0.8333333333333277 * sp[35] + -7.166666666666657 * sp[29] + -7.999999999999928 * sp[32] + -1.666666666666714 * sp[28] + 0.8333333333333992 * sp[29] + -7.16666666666678 * sp[26] + -4.666666666666674 * sp[27] + -1.666666666666731 * sp[31] + -1.666666666666642 * sp[32] + -3.666666666666713 * sp[27] + -5.833333333333282 * sp[30];
    A[120] = -1.508333333333339 * sp[33] + -0.7333333333333401 * sp[34] + 2.800000000000011 * sp[28] + 0.9833333333333297 * sp[31] + 0.3083333333333444 * sp[34] + 0.7625000000000077 * sp[35] + -2.887500000000008 * sp[29] + -0.7166666666666636 * sp[32] + 0.3083333333333348 * sp[28] + -1.187500000000011 * sp[29] + 4.295833333333356 * sp[26] + 0.9833333333333347 * sp[27] + 0.3083333333333444 * sp[31] + 0.3083333333333412 * sp[32] + -1.391666666666681 * sp[27] + -0.4083333333333349 * sp[30];
    A[121] = 1.016666666666665 * sp[33] + 1.05 * sp[34] + -1.85000000000001 * sp[28] + 2.116666666666676 * sp[31] + -0.3666666666666831 * sp[34] + -1.275000000000007 * sp[35] + 2.025000000000007 * sp[29] + -2.483333333333339 * sp[32] + -0.3666666666666705 * sp[28] + 1.958333333333341 * sp[29] + -3.008333333333353 * sp[26] + 2.116666666666676 * sp[27] + -0.3666666666666789 * sp[31] + -0.3666666666666717 * sp[32] + 0.8666666666666751 * sp[27] + -1.266666666666675 * sp[30];
    A[122] = -0.09166666666666737 * sp[33] + -0.4000000000000052 * sp[34] + 0.4666666666666738 * sp[28] + -1.183333333333334 * sp[31] + -0.1083333333333411 * sp[34] + 0.6374999999999894 * sp[35] + -0.5124999999999983 * sp[29] + 2.116666666666677 * sp[32] + -0.1083333333333336 * sp[28] + -1.145833333333339 * sp[29] + 0.8375000000000095 * sp[26] + -1.183333333333337 * sp[27] + -0.1083333333333371 * sp[31] + -0.1083333333333378 * sp[32] + -0.1416666666666683 * sp[27] + 1.00833333333334 * sp[30];
    A[123] = 1.091666666666676 * sp[33] + 0.3583333333333458 * sp[34] + 3.225000000000008 * sp[28] + 1.34166666666668 * sp[31] + -0.01666666666666239 * sp[34] + -0.3874999999999967 * sp[35] + 0.9625 * sp[29] + 0.5583333333333379 * sp[32] + -0.01666666666666383 * sp[28] + 0.7291666666666783 * sp[29] + -1.054166666666662 * sp[26] + -0.3083333333333234 * sp[27] + -0.01666666666666805 * sp[31] + -0.01666666666666897 * sp[32] + -0.01666666666666514 * sp[27] + 0.09166666666667028 * sp[30];
    A[124] = -0.1833333333333373 * sp[33] + -0.3000000000000098 * sp[34] + -0.8666666666666667 * sp[28] + -1.933333333333337 * sp[31] + -0.2166666666666817 * sp[34] + 0.5249999999999837 * sp[35] + -1.008333333333346 * sp[29] + -1.533333333333355 * sp[32] + -0.216666666666669 * sp[28] + -1.041666666666674 * sp[29] + 0.358333333333331 * sp[26] + -0.4666666666666734 * sp[27] + -0.2166666666666739 * sp[31] + -0.2166666666666729 * sp[32] + -0.216666666666677 * sp[27] + -0.6000000000000146 * sp[30];
    A[125] = 0.5083333333333311 * sp[33] + 0.7750000000000004 * sp[34] + 0.9749999999999961 * sp[28] + 0.5916666666666659 * sp[31] + -0.1833333333333412 * sp[34] + -1.012500000000001 * sp[35] + 0.1708333333333215 * sp[29] + 0.9749999999999956 * sp[32] + -0.1833333333333355 * sp[28] + 1.604166666666673 * sp[29] + -1.01250000000001 * sp[26] + 0.7750000000000073 * sp[27] + -0.1833333333333392 * sp[31] + -0.1833333333333342 * sp[32] + -0.1833333333333415 * sp[27] + 0.5083333333333344 * sp[30];
    A[126] = 2.183333333333342 * sp[33] + 2.424999999999999 * sp[34] + 1.091666666666676 * sp[28] + 0.8583333333333354 * sp[31] + -0.2416666666666661 * sp[34] + 1.625000000000021 * sp[35] + -1.074999999999998 * sp[29] + 0.1583333333333471 * sp[32] + 1.091666666666678 * sp[28] + 0.258333333333329 * sp[29] + 1.691666666666677 * sp[26] + 0.8583333333333345 * sp[27] + -0.4750000000000026 * sp[31] + 0.1583333333333443 * sp[32] + -0.4750000000000058 * sp[27] + -0.03333333333333117 * sp[30];
    A[127] = -5.86666666666668 * sp[33] + -2.43333333333333 * sp[34] + -3.100000000000013 * sp[28] + -1.966666666666662 * sp[31] + 2.06666666666668 * sp[34] + 0.4166666666666573 * sp[35] + 3.150000000000007 * sp[29] + 1.433333333333324 * sp[32] + -3.266666666666687 * sp[28] + -0.5166666666666664 * sp[29] + -4.71666666666669 * sp[26] + -1.966666666666668 * sp[27] + 1.533333333333349 * sp[31] + 0.5999999999999961 * sp[32] + 1.533333333333351 * sp[27] + 0.8166666666666684 * sp[30];
    A[128] = 3.683333333333338 * sp[33] + -1.825000000000013 * sp[34] + 2.175000000000008 * sp[28] + -1.058333333333346 * sp[31] + -1.825000000000013 * sp[34] + 2.708333333333335 * sp[35] + -2.325000000000006 * sp[29] + 1.241666666666674 * sp[32] + 2.175000000000008 * sp[28] + -2.325000000000006 * sp[29] + 3.441666666666683 * sp[26] + -1.058333333333343 * sp[27] + -1.058333333333346 * sp[31] + 1.241666666666674 * sp[32] + -1.058333333333343 * sp[27] + 0.6333333333333396 * sp[30];
    A[129] = -1.64991582276863 * sp[33] + 4.949747468305818 * sp[34] + 3.535533905932751 * sp[28] + 11.5494107593803 * sp[31] + -0.47140452079107 * sp[34] + -13.08147545195119 * sp[35] + -3.181980515339466 * sp[29] + -11.07800623858924 * sp[32] + -0.4714045207910387 * sp[28] + 6.246109900481168 * sp[29] + 4.831896338108088 * sp[26] + 11.54941075938031 * sp[27] + -0.4714045207910468 * sp[31] + -6.128258770283453 * sp[32] + -1.885618083164152 * sp[27] + -5.892556509887925 * sp[30];
    A[130] = -13.13471862406399 * sp[33] + 12.12435565298213 * sp[34] + 5.196152422706659 * sp[28] + 17.031832941094 * sp[31] + -0.7216878364868746 * sp[34] + -6.278684177437055 * sp[35] + -4.546633369868279 * sp[29] + -12.41303078757689 * sp[32] + -0.7216878364869834 * sp[28] + 9.021097956087884 * sp[29] + 7.28904714851905 * sp[26] + 17.03183294109401 * sp[27] + -0.7216878364869278 * sp[31] + -5.051814855409167 * sp[32] + -2.453738644055942 * sp[27] + -7.072540797572941 * sp[30];
    A[131] = 3.08333333333335 * sp[33] + -9.500000000000023 * sp[34] + -3.499999999999972 * sp[28] + -11.33333333333332 * sp[31] + -1.583333333333426 * sp[34] + 13.37500000000006 * sp[35] + 3.375000000000032 * sp[29] + 17.66666666666673 * sp[32] + -1.583333333333335 * sp[28] + -8.45833333333332 * sp[29] + -4.458333333333312 * sp[26] + -11.33333333333336 * sp[27] + -1.583333333333393 * sp[31] + 3.916666666666722 * sp[32] + 2.416666666666691 * sp[27] + 8.583333333333382 * sp[30];
    A[132] = -2.357022603955149 * sp[33] + -2.121320343559621 * sp[34] + -13.43502884254442 * sp[28] + -5.421151989096893 * sp[31] + 1.649915822768701 * sp[34] + 2.121320343559713 * sp[35] + 3.535533905932796 * sp[29] + 3.064129385141736 * sp[32] + 1.649915822768625 * sp[28] + -2.592724864350683 * sp[29] + -1.178511301977569 * sp[26] + -5.42115198909692 * sp[27] + 1.649915822768667 * sp[31] + 1.649915822768645 * sp[32] + 3.064129385141772 * sp[27] + 1.885618083164161 * sp[30];
    A[133] = 10.39230484541331 * sp[33] + 3.031088913245604 * sp[34] + 3.031088913245552 * sp[28] + -10.82531754730544 * sp[31] + -1.29903810567668 * sp[34] + -2.598076211353348 * sp[35] + 4.330127018922259 * sp[29] + 4.763139720814386 * sp[32] + -1.299038105676667 * sp[28] + 4.330127018922273 * sp[29] + -16.45448267190435 * sp[26] + -10.82531754730543 * sp[27] + -1.299038105676708 * sp[31] + -1.299038105676706 * sp[32] + 0.4330127018922889 * sp[27] + 2.598076211353331 * sp[30];
    A[134] = -4.166666666666631 * sp[33] + -3.749999999999956 * sp[34] + 4.250000000000028 * sp[28] + 1.916666666666701 * sp[31] + 2.916666666666818 * sp[34] + 3.750000000000114 * sp[35] + -2.24999999999995 * sp[29] + -13.08333333333321 * sp[32] + 2.916666666666699 * sp[28] + -4.583333333333338 * sp[29] + 9.416666666666742 * sp[26] + 1.916666666666693 * sp[27] + 2.916666666666762 * sp[31] + 2.916666666666722 * sp[32] + -1.083333333333297 * sp[27] + -6.666666666666609 * sp[30];
    A[135] = 1.649915822768633 * sp[33] + 3.064129385141737 * sp[34] + -1.649915822768621 * sp[28] + -1.649915822768627 * sp[31] + 0.4714045207910296 * sp[34] + 1.767766952966348 * sp[35] + 5.067598598503602 * sp[29] + -0.2357022603955312 * sp[32] + -5.18544972870135 * sp[28] + -3.889087296526051 * sp[29] + 10.72445284799599 * sp[26] + 4.006938426723755 * sp[27] + -5.18544972870137 * sp[31] + -5.185449728701416 * sp[32] + 17.44196726926821 * sp[27] + 5.892556509887877 * sp[30];
    A[136] = 3.771236166328282 * sp[33] + -3.771236166328285 * sp[34] + 0.9428090415820796 * sp[28] + 0.9428090415820859 * sp[31] + 6.128258770283456 * sp[34] + 1.178511301977612 * sp[35] + -5.421151989096853 * sp[29] + 12.25651754056687 * sp[32] + 3.29983164553722 * sp[28] + -1.649915822768579 * sp[29] + -2.592724864350703 * sp[26] + 3.771236166328271 * sp[27] + 3.299831645537235 * sp[31] + 3.299831645537284 * sp[32] + -8.956685895029654 * sp[27] + 11.7851130197758 * sp[30];
    A[137] = 4.006938426723785 * sp[33] + 10.13519719700724 * sp[34] + -4.006938426723808 * sp[28] + -4.006938426723797 * sp[31] + 5.185449728701362 * sp[34] + 7.660323462854284 * sp[35] + -3.181980515339492 * sp[29] + -16.73486048808169 * sp[32] + -0.471404520791021 * sp[28] + 2.003469213361899 * sp[29] + 2.474873734152924 * sp[26] + 1.649915822768599 * sp[27] + -0.471404520791016 * sp[31] + -0.4714045207910388 * sp[32] + 3.299831645537244 * sp[27] + -5.892556509887909 * sp[30];
    A[138] = -7.542472332656567 * sp[33] + -7.778174593052078 * sp[34] + -8.720983634634134 * sp[28] + -7.778174593052062 * sp[31] + -8.720983634634131 * sp[34] + -8.249579113843071 * sp[35] + -12.96362432175342 * sp[29] + -11.07800623858926 * sp[32] + 4.006938426723766 * sp[28] + 4.478342947514808 * sp[29] + -0.2357022603955117 * sp[26] + 0.2357022603955237 * sp[27] + 4.006938426723774 * sp[31] + 4.006938426723805 * sp[32] + 4.006938426723756 * sp[27] + 2.357022603955166 * sp[30];
    A[139] = 8.013876853447586 * sp[33] + 13.19932658214897 * sp[34] + 5.65685424949239 * sp[28] + 13.19932658214893 * sp[31] + 10.37089945740275 * sp[34] + 11.78511301977584 * sp[35] + 11.78511301977581 * sp[29] + 24.51303508113373 * sp[32] + -0.94280904158205 * sp[28] + 0.4714045207910533 * sp[29] + 0.4714045207910416 * sp[26] + 1.885618083164168 * sp[27] + -0.9428090415820432 * sp[31] + -0.942809041582065 * sp[32] + -0.9428090415820201 * sp[27];
    A[140] = 1.885618083164145 * sp[33] + -5.421151989096902 * sp[34] + 3.064129385141731 * sp[28] + -5.421151989096912 * sp[31] + 3.064129385141731 * sp[34] + -1.178511301977566 * sp[35] + 3.535533905932768 * sp[29] + -13.43502884254442 * sp[32] + 1.649915822768606 * sp[28] + -2.592724864350662 * sp[29] + 2.121320343559633 * sp[26] + -2.121320343559629 * sp[27] + 1.649915822768613 * sp[31] + 1.649915822768649 * sp[32] + 1.649915822768601 * sp[27] + -2.357022603955117 * sp[30];
    A[141] = -4.006938426723785 * sp[33] + -5.18544972870135 * sp[34] + -5.185449728701394 * sp[28] + -5.185449728701381 * sp[31] + -6.835365551469964 * sp[34] + -18.97403196183914 * sp[35] + -4.360491817317067 * sp[29] + -10.84230397819381 * sp[32] + 5.892556509887903 * sp[28] + 5.067598598503555 * sp[29] + 8.367430244040811 * sp[26] + 7.542472332656494 * sp[27] + 9.192388155425117 * sp[31] + 5.421151989096755 * sp[32] + 9.192388155425133 * sp[27] + 5.892556509887857 * sp[30];
    A[142] = 5.65685424949241 * sp[33] + 3.299831645537245 * sp[34] + 3.299831645537244 * sp[28] + 3.299831645537242 * sp[31] + 1.885618083164137 * sp[34] + 2.592724864350722 * sp[35] + -3.064129385141716 * sp[29] + 0.4714045207910678 * sp[32] + -9.428090415820648 * sp[28] + -3.064129385141695 * sp[29] + -14.37783788412647 * sp[26] + -8.013876853447512 * sp[27] + -20.74179891480541 * sp[31] + -8.485281374238516 * sp[32] + -20.74179891480543 * sp[27] + -11.78511301977574 * sp[30];
    A[143] = -1.64991582276863 * sp[33] + -0.47140452079107 * sp[34] + -0.4714045207910387 * sp[28] + -0.4714045207910468 * sp[31] + 4.949747468305818 * sp[34] + -13.08147545195119 * sp[35] + 6.246109900481168 * sp[29] + -6.128258770283453 * sp[32] + 3.535533905932751 * sp[28] + -3.181980515339466 * sp[29] + 4.831896338108088 * sp[26] + -1.885618083164152 * sp[27] + 11.5494107593803 * sp[31] + -11.07800623858924 * sp[32] + 11.54941075938031 * sp[27] + -5.892556509887925 * sp[30];
    A[144] = 26.66666666666689 * sp[33] + 33.33333333333356 * sp[34] + -6.666666666666664 * sp[28] + -6.666666666666652 * sp[31] + 33.33333333333356 * sp[34] + 113.3333333333338 * sp[35] + -6.666666666666586 * sp[29] + 33.33333333333341 * sp[32] + -6.666666666666664 * sp[28] + -6.666666666666586 * sp[29] + 33.33333333333329 * sp[26] + 33.33333333333331 * sp[27] + -6.666666666666652 * sp[31] + 33.33333333333341 * sp[32] + 33.33333333333331 * sp[27] + 66.66666666666654 * sp[30];
    A[145] = 4.082482904638772 * sp[33] + -4.082482904638438 * sp[34] + -28.57738033247059 * sp[28] + -28.57738033247051 * sp[31] + 8.164965809277376 * sp[34] + 14.28869016623499 * sp[35] + -34.70110468942839 * sp[29] + -4.082482904638923 * sp[32] + 8.164965809277241 * sp[28] + 14.28869016623504 * sp[29] + 63.27848502189866 * sp[26] + 69.40220937885665 * sp[27] + 8.164965809276922 * sp[31] + 57.15476066494018 * sp[32] + 57.15476066494075 * sp[27] + 102.0620726159655 * sp[30];
    A[146] = 25.92724864350682 * sp[33] + 16.49915822768609 * sp[34] + -25.92724864350701 * sp[28] + -25.92724864350692 * sp[31] + 37.71236166328269 * sp[34] + -64.81812160876716 * sp[35] + -36.53385036130521 * sp[29] + -124.9221980096239 * sp[32] + 9.428090415820749 * sp[28] + 20.034692133619 * sp[29] + -8.249579113843039 * sp[26] + 2.357022603955109 * sp[27] + 9.42809041582084 * sp[31] + -18.85618083164135 * sp[32] + -18.85618083164119 * sp[27] + -58.92556509887898 * sp[30];
    A[147] = -33.33333333333353 * sp[33] + -26.66666666666677 * sp[34] + 13.33333333333347 * sp[28] + 13.33333333333352 * sp[31] + -46.66666666666691 * sp[34] + -36.66666666666687 * sp[35] + 3.333333333333378 * sp[29] + 13.33333333333336 * sp[32] + -6.666666666666721 * sp[28] + 3.333333333333155 * sp[29] + -36.66666666666664 * sp[26] + -26.66666666666683 * sp[27] + -6.666666666666794 * sp[31] + -6.666666666666883 * sp[32] + -46.6666666666667 * sp[27] + -33.33333333333357 * sp[30];
    A[148] = -36.74234614174787 * sp[33] + -24.49489742783201 * sp[34] + -24.494897427832 * sp[28] + -36.74234614174773 * sp[34] + -30.61862178478968 * sp[35] + -6.123724356958164 * sp[29] + 36.74234614174769 * sp[28] + 42.8660704987058 * sp[29] + -30.61862178478969 * sp[26] + -24.49489742783147 * sp[27] + 36.74234614174775 * sp[31] + 36.74234614174801 * sp[32] + -12.24744871391611 * sp[27] + -36.74234614174721 * sp[30];
    A[149] = -58.92556509887932 * sp[33] + -47.14045207910335 * sp[34] + -18.85618083164131 * sp[28] + -4.714045207910259 * sp[31] + -82.49579113843095 * sp[34] + -64.8181216087672 * sp[35] + -22.39171473757409 * sp[29] + 80.13876853447549 * sp[32] + -11.78511301977584 * sp[28] + 5.892556509887626 * sp[29] + -8.249579113842961 * sp[26] + 9.428090415820538 * sp[27] + -11.78511301977594 * sp[31] + -11.78511301977611 * sp[32] + 16.49915822768611 * sp[27] + 54.21151989096823 * sp[30];
    A[150] = 10.96965511460293 * sp[33] + 0.1443375672973244 * sp[34] + 0.7216878364870887 * sp[28] + 0.7216878364870822 * sp[31] + 0.7216878364869894 * sp[34] + -1.732050807568892 * sp[35] + 11.54700538379247 * sp[29] + 5.051814855409201 * sp[32] + -10.53664241271068 * sp[28] + -8.660254037844478 * sp[29] + 18.47520861406806 * sp[26] + 7.649891066762525 * sp[27] + -10.53664241271071 * sp[31] + -10.53664241271078 * sp[32] + 29.30052616137357 * sp[27] + 10.96965511460286 * sp[30];
    A[151] = -8.948929172439183 * sp[33] + -3.175426480542785 * sp[34] + 1.443375672974013 * sp[28] + 1.44337567297394 * sp[31] + -1.443375672973986 * sp[34] + 2.020725942163697 * sp[35] + -7.216878364870322 * sp[29] + 10.10362971081831 * sp[32] + 3.752776749732529 * sp[28] + -1.443375672973972 * sp[29] + -3.752776749732626 * sp[26] + 4.907477288111832 * sp[27] + 3.752776749732572 * sp[31] + 3.752776749732649 * sp[32] + -12.41303078757704 * sp[27] + 14.1450815951458 * sp[30];
    A[152] = -0.5773502691896065 * sp[33] + 4.474464586219592 * sp[34] + -0.7216878364870318 * sp[28] + -0.7216878364870132 * sp[31] + -0.7216878364869905 * sp[34] + 4.041451884327437 * sp[35] + -5.051814855409162 * sp[32] + -3.319764047840347 * sp[28] + -2.88675134594816 * sp[29] + 6.928203230275551 * sp[26] + 6.206515393788476 * sp[27] + -3.319764047840328 * sp[31] + -3.319764047840351 * sp[32] + 7.649891066762591 * sp[27] + -0.5773502691895818 * sp[30];
    A[153] = -5.917840259193724 * sp[33] + -0.8660254037844575 * sp[34] + -11.83568051838745 * sp[28] + -0.8660254037845507 * sp[31] + 0.7216878364870065 * sp[34] + -2.237232293109823 * sp[35] + 18.25870226312187 * sp[29] + 10.96965511460282 * sp[32] + 11.98001808568477 * sp[28] + 13.35122497501015 * sp[29] + 2.670244995002053 * sp[26] + 4.041451884327421 * sp[27] + 11.98001808568477 * sp[31] + 11.9800180856848 * sp[32] + 11.98001808568476 * sp[27] + 8.804591605141825 * sp[30];
    A[154] = -1.154700538379211 * sp[33] + 4.618802153517041 * sp[34] + -5.196152422706561 * sp[28] + 4.618802153517112 * sp[31] + -1.443375672973992 * sp[34] + 5.917840259193735 * sp[35] + -14.86676943163276 * sp[29] + -16.16580753730941 * sp[32] + -6.639528095680718 * sp[28] + -7.938566201357391 * sp[29] + -1.010362971081842 * sp[26] + -2.309401076758472 * sp[27] + -6.639528095680688 * sp[31] + -6.639528095680706 * sp[32] + -6.639528095680648 * sp[27] + -10.39230484541321 * sp[30];
    A[155] = -4.474464586219583 * sp[33] + -3.752776749732468 * sp[34] + -8.948929172439215 * sp[28] + -3.752776749732456 * sp[31] + -0.7216878364869957 * sp[34] + -0.0721687836487232 * sp[35] + 0.2165063509461634 * sp[29] + 5.196152422706652 * sp[32] + 1.876388374866255 * sp[28] + -1.804219591217516 * sp[29] + 1.94855715851494 * sp[26] + -1.732050807568806 * sp[27] + 1.876388374866275 * sp[31] + 1.876388374866328 * sp[32] + 1.876388374866259 * sp[27] + 1.587713240271566 * sp[30];
    A[156] = 2.742413778650671 * sp[33] + 0.721687836486856 * sp[34] + 0.7216878364870265 * sp[28] + 0.7216878364869892 * sp[31] + 17.89785834487833 * sp[34] + 24.75389279150507 * sp[35] + 2.525907427704568 * sp[29] + 5.051814855409172 * sp[32] + 10.96965511460291 * sp[28] + 9.165435523385248 * sp[29] + 18.11436469582454 * sp[26] + 16.31014510460693 * sp[27] + 19.91858428704211 * sp[31] + 19.34123401785238 * sp[32] + 19.91858428704213 * sp[27] + 17.46484564298618 * sp[30];
    A[157] = 10.39230484541331 * sp[33] + -1.443375672974021 * sp[34] + -1.443375672974109 * sp[28] + -1.443375672974081 * sp[31] + -30.02221399786047 * sp[34] + -19.19689645055495 * sp[35] + -12.26869322027949 * sp[29] + -10.10362971081836 * sp[32] + -16.16580753730955 * sp[28] + -5.340489990004031 * sp[29] + -26.12509968083059 * sp[26] + -15.29978213352505 * sp[27] + -36.9504172281361 * sp[31] + -15.58845726811983 * sp[32] + -36.95041722813611 * sp[27] + -21.93931022920571 * sp[30];
    A[158] = -13.13471862406399 * sp[33] + -0.7216878364868746 * sp[34] + -0.7216878364869834 * sp[28] + -0.7216878364869278 * sp[31] + 12.12435565298213 * sp[34] + -6.278684177437055 * sp[35] + 9.021097956087884 * sp[29] + -5.051814855409167 * sp[32] + 5.196152422706659 * sp[28] + -4.546633369868279 * sp[29] + 7.28904714851905 * sp[26] + -2.453738644055942 * sp[27] + 17.031832941094 * sp[31] + -12.41303078757689 * sp[32] + 17.03183294109401 * sp[27] + -7.072540797572941 * sp[30];
    A[159] = 4.082482904638772 * sp[33] + 8.164965809277376 * sp[34] + 8.164965809277241 * sp[28] + 8.164965809276922 * sp[31] + -4.082482904638438 * sp[34] + 14.28869016623499 * sp[35] + 14.28869016623504 * sp[29] + 57.15476066494018 * sp[32] + -28.57738033247059 * sp[28] + -34.70110468942839 * sp[29] + 63.27848502189866 * sp[26] + 57.15476066494075 * sp[27] + -28.57738033247051 * sp[31] + -4.082482904638923 * sp[32] + 69.40220937885665 * sp[27] + 102.0620726159655 * sp[30];
    A[160] = 189.9999999999996 * sp[33] + 57.49999999999886 * sp[34] + 12.49999999999989 * sp[28] + 12.49999999999931 * sp[31] + 57.49999999999886 * sp[34] + 132.4999999999986 * sp[35] + 12.49999999999959 * sp[29] + 87.49999999999898 * sp[32] + 12.49999999999989 * sp[28] + 12.49999999999959 * sp[29] + 132.4999999999999 * sp[26] + 132.4999999999999 * sp[27] + 12.49999999999931 * sp[31] + 87.49999999999898 * sp[32] + 132.4999999999999 * sp[27] + 189.9999999999997 * sp[30];
    A[161] = -31.7542648054294 * sp[33] + 105.3664241271069 * sp[34] + -7.216878364870439 * sp[28] + -7.216878364870311 * sp[31] + -7.216878364869896 * sp[34] + 57.73502691896255 * sp[35] + -28.86751345948126 * sp[29] + -50.51814855409166 * sp[32] + 1.443375672974133 * sp[28] + 23.09401076758526 * sp[29] + 5.773502691896494 * sp[26] + 27.42413778650727 * sp[27] + 1.443375672974369 * sp[31] + 10.10362971081873 * sp[32] + -15.87713240271446 * sp[27] + -31.75426480542897 * sp[30];
    A[162] = 28.57738033247026 * sp[33] + -4.082482904639178 * sp[34] + 69.40220937885685 * sp[28] + -4.082482904638951 * sp[31] + 8.164965809276811 * sp[34] + -22.45365597551272 * sp[35] + -22.4536559755126 * sp[29] + -28.57738033247043 * sp[32] + 8.164965809277369 * sp[28] + 26.53613888015088 * sp[29] + -71.44345083117602 * sp[26] + -53.0722777603026 * sp[27] + 8.164965809277152 * sp[31] + 8.164965809276971 * sp[32] + -89.81462390205002 * sp[27] + -69.40220937885721 * sp[30];
    A[163] = -67.50000000000037 * sp[33] + 7.500000000000139 * sp[34] + 7.499999999999073 * sp[28] + 52.50000000000031 * sp[31] + 3.750000000000063 * sp[35] + 48.74999999999943 * sp[29] + -22.49999999999968 * sp[32] + 90.00000000000011 * sp[28] + 93.75000000000044 * sp[29] + -41.24999999999983 * sp[26] + -37.49999999999935 * sp[27] + 90.00000000000024 * sp[31] + 90.00000000000065 * sp[32] + -30.00000000000031 * sp[27] + -67.4999999999993 * sp[30];
    A[164] = 50.51814855409187 * sp[33] + -7.21687836487126 * sp[34] + 44.74464586219594 * sp[28] + 105.3664241271056 * sp[31] + 14.43375672973987 * sp[34] + -39.69283100678719 * sp[35] + 72.89047148518975 * sp[29] + 62.06515393788339 * sp[32] + 14.43375672974095 * sp[28] + 46.90970937165679 * sp[29] + -13.71206889325337 * sp[26] + 18.76388374866262 * sp[27] + 14.43375672974059 * sp[31] + 14.43375672974024 * sp[32] + 31.75426480542949 * sp[27] + 50.51814855409124 * sp[30];
    A[165] = -6.833333333333358 * sp[33] + 2.416666666666663 * sp[34] + 0.08333333333335335 * sp[28] + 0.08333333333331411 * sp[31] + 1.583333333333338 * sp[34] + 3.749999999999964 * sp[35] + -4.916666666666615 * sp[29] + 0.5833333333333677 * sp[32] + 0.08333333333333304 * sp[28] + -1.250000000000022 * sp[29] + -5.916666666666646 * sp[26] + -0.9166666666666377 * sp[27] + 0.0833333333333357 * sp[31] + 0.08333333333338033 * sp[32] + -10.9166666666667 * sp[27] + -1.833333333333316 * sp[30];
    A[166] = 11.1666666666667 * sp[33] + -8.166666666666686 * sp[34] + 3.166666666666679 * sp[28] + 3.166666666666741 * sp[31] + 1.833333333333342 * sp[34] + -16.66666666666666 * sp[35] + 10.66666666666666 * sp[29] + -7.833333333333405 * sp[32] + -5.166666666666721 * sp[28] + 3.333333333333384 * sp[29] + 2.666666666666644 * sp[26] + -4.833333333333353 * sp[27] + -5.166666666666701 * sp[31] + -5.166666666666741 * sp[32] + 10.16666666666669 * sp[27] + -17.16666666666671 * sp[30];
    A[167] = 4.833333333333332 * sp[33] + 14.9166666666667 * sp[34] + -4.083333333333356 * sp[28] + -4.08333333333336 * sp[31] + 2.416666666666655 * sp[34] + 22.91666666666669 * sp[35] + -5.749999999999996 * sp[29] + 11.41666666666676 * sp[32] + -4.08333333333336 * sp[28] + -12.08333333333342 * sp[29] + 3.250000000000041 * sp[26] + 4.916666666666694 * sp[27] + -4.083333333333346 * sp[31] + -4.083333333333306 * sp[32] + 1.583333333333337 * sp[27] + 19.83333333333342 * sp[30];
    A[168] = -3.583333333333337 * sp[33] + -7.000000000000011 * sp[34] + -2.666666666666638 * sp[28] + -6.999999999999977 * sp[31] + -4.916666666666666 * sp[34] + -7.70833333333332 * sp[35] + 4.458333333333293 * sp[29] + 2.166666666666625 * sp[32] + 6.583333333333393 * sp[28] + 7.291666666666721 * sp[29] + 5.458333333333379 * sp[26] + 6.166666666666707 * sp[27] + 6.583333333333365 * sp[31] + 6.583333333333316 * sp[32] + 6.583333333333411 * sp[27] + 6.916666666666685 * sp[30];
    A[169] = 9.666666666666684 * sp[33] + 17.33333333333337 * sp[34] + 6.999999999999976 * sp[28] + 17.33333333333333 * sp[31] + 4.83333333333332 * sp[34] + 24.58333333333335 * sp[35] + -11.41666666666666 * sp[29] + -2.666666666666667 * sp[32] + -8.166666666666735 * sp[28] + -15.41666666666678 * sp[29] + -3.416666666666698 * sp[26] + -10.66666666666676 * sp[27] + -8.166666666666707 * sp[31] + -8.166666666666663 * sp[32] + -8.166666666666723 * sp[27] + -18.00000000000011 * sp[30];
    A[170] = 5.583333333333347 * sp[33] + -10.33333333333336 * sp[34] + 10.6666666666667 * sp[28] + -10.33333333333337 * sp[31] + 0.9166666666666734 * sp[34] + -18.95833333333335 * sp[35] + 4.874999999999998 * sp[29] + 0.5 * sp[32] + -2.583333333333362 * sp[28] + 6.041666666666732 * sp[29] + -4.125000000000043 * sp[26] + 4.500000000000076 * sp[27] + -2.583333333333352 * sp[31] + -2.583333333333388 * sp[32] + -2.583333333333337 * sp[27] + 11.08333333333333 * sp[30];
    A[171] = -1.083333333333299 * sp[33] + -2.416666666666612 * sp[34] + -2.416666666666675 * sp[28] + -2.416666666666664 * sp[31] + 12.16666666666668 * sp[34] + 27.95833333333339 * sp[35] + -2.208333333333306 * sp[29] + 8.083333333333428 * sp[32] + -1.833333333333313 * sp[28] + -2.041666666666628 * sp[29] + 1.791666666666719 * sp[26] + 1.58333333333338 * sp[27] + 2.000000000000028 * sp[31] + 14.33333333333354 * sp[32] + 2.000000000000006 * sp[27] + 9.416666666666774 * sp[30];
    A[172] = -2.000000000000055 * sp[33] + -0.1666666666666733 * sp[34] + -0.166666666666688 * sp[28] + -0.1666666666666621 * sp[31] + -2.666666666666659 * sp[34] + -8.416666666666677 * sp[35] + 3.583333333333278 * sp[29] + -1.166666666666719 * sp[32] + 5.333333333333291 * sp[28] + 1.583333333333292 * sp[29] + 5.583333333333297 * sp[26] + 1.833333333333284 * sp[27] + 9.333333333333304 * sp[31] + 2.999999999999913 * sp[32] + 9.333333333333371 * sp[27] + 3.666666666666613 * sp[30];
    A[173] = 3.08333333333335 * sp[33] + -1.583333333333426 * sp[34] + -1.583333333333335 * sp[28] + -1.583333333333393 * sp[31] + -9.500000000000023 * sp[34] + 13.37500000000006 * sp[35] + -8.45833333333332 * sp[29] + 3.916666666666722 * sp[32] + -3.499999999999972 * sp[28] + 3.375000000000032 * sp[29] + -4.458333333333312 * sp[26] + 2.416666666666691 * sp[27] + -11.33333333333332 * sp[31] + 17.66666666666673 * sp[32] + -11.33333333333336 * sp[27] + 8.583333333333382 * sp[30];
    A[174] = 25.92724864350682 * sp[33] + 37.71236166328269 * sp[34] + 9.428090415820749 * sp[28] + 9.42809041582084 * sp[31] + 16.49915822768609 * sp[34] + -64.81812160876716 * sp[35] + 20.034692133619 * sp[29] + -18.85618083164135 * sp[32] + -25.92724864350701 * sp[28] + -36.53385036130521 * sp[29] + -8.249579113843039 * sp[26] + -18.85618083164119 * sp[27] + -25.92724864350692 * sp[31] + -124.9221980096239 * sp[32] + 2.357022603955109 * sp[27] + -58.92556509887898 * sp[30];
    A[175] = -31.7542648054294 * sp[33] + -7.216878364869896 * sp[34] + 1.443375672974133 * sp[28] + 1.443375672974369 * sp[31] + 105.3664241271069 * sp[34] + 57.73502691896255 * sp[35] + 23.09401076758526 * sp[29] + 10.10362971081873 * sp[32] + -7.216878364870439 * sp[28] + -28.86751345948126 * sp[29] + 5.773502691896494 * sp[26] + -15.87713240271446 * sp[27] + -7.216878364870311 * sp[31] + -50.51814855409166 * sp[32] + 27.42413778650727 * sp[27] + -31.75426480542897 * sp[30];
    A[176] = 53.33333333333345 * sp[33] + 14.16666666666658 * sp[34] + -30.83333333333358 * sp[28] + -30.83333333333349 * sp[31] + 14.16666666666658 * sp[34] + 219.1666666666672 * sp[35] + -30.83333333333342 * sp[29] + 84.16666666666728 * sp[32] + -30.83333333333358 * sp[28] + -30.83333333333342 * sp[29] + 39.16666666666691 * sp[26] + 39.16666666666679 * sp[27] + -30.83333333333349 * sp[31] + 84.16666666666728 * sp[32] + 39.16666666666679 * sp[27] + 153.3333333333339 * sp[30];
    A[177] = -58.92556509887908 * sp[33] + -25.92724864350678 * sp[34] + -40.06938426723783 * sp[28] + 2.357022603955194 * sp[31] + -18.85618083164126 * sp[34] + -22.39171473757404 * sp[35] + 5.892556509887861 * sp[29] + -11.78511301977596 * sp[32] + 37.71236166328288 * sp[28] + 34.17682775734995 * sp[29] + 5.892556509887816 * sp[26] + 2.35702260395501 * sp[27] + 37.71236166328273 * sp[31] + 37.71236166328272 * sp[32] + 9.428090415820545 * sp[27] + -2.357022603955118 * sp[30];
    A[178] = 12.99038105676684 * sp[33] + -4.330127018922152 * sp[34] + -4.3301270189222 * sp[28] + -12.99038105676674 * sp[31] + -25.98076211353297 * sp[34] + 10.82531754730572 * sp[35] + 2.165063509460659 * sp[29] + 12.99038105676648 * sp[32] + 25.98076211353327 * sp[28] + 10.82531754730559 * sp[29] + 36.80607966083873 * sp[26] + 21.65063509461087 * sp[27] + 25.98076211353322 * sp[31] + 25.98076211353298 * sp[32] + -8.660254037844062 * sp[27] + 12.99038105676617 * sp[30];
    A[179] = -104.1666666666668 * sp[33] + -45.83333333333338 * sp[34] + -55.83333333333331 * sp[28] + -0.8333333333331452 * sp[31] + -33.33333333333336 * sp[34] + -39.58333333333339 * sp[35] + 5.416666666666673 * sp[29] + -25.83333333333367 * sp[32] + 66.66666666666724 * sp[28] + 60.41666666666693 * sp[29] + 5.416666666666846 * sp[26] + -0.8333333333334014 * sp[27] + 66.66666666666698 * sp[31] + 66.66666666666697 * sp[32] + -3.333333333333245 * sp[27] + -104.1666666666667 * sp[30];
    A[180] = 5.892556509887894 * sp[33] + -3.299831645537239 * sp[34] + 0.471404520791036 * sp[28] + 0.4714045207910637 * sp[31] + -1.649915822768606 * sp[34] + -2.474873734152916 * sp[35] + -2.003469213361923 * sp[29] + 0.4714045207910251 * sp[32] + 16.73486048808167 * sp[28] + 3.181980515339504 * sp[29] + -7.660323462854263 * sp[26] + -5.185449728701312 * sp[27] + 4.006938426723791 * sp[31] + 4.006938426723843 * sp[32] + -10.13519719700728 * sp[27] + -4.006938426723794 * sp[30];
    A[181] = -11.78511301977582 * sp[33] + 8.956685895029636 * sp[34] + -3.299831645537248 * sp[28] + -3.29983164553729 * sp[31] + -3.771236166328281 * sp[34] + 2.592724864350712 * sp[35] + 1.649915822768607 * sp[29] + -3.299831645537272 * sp[32] + -12.25651754056681 * sp[28] + 5.421151989096849 * sp[29] + -1.178511301977577 * sp[26] + -6.128258770283466 * sp[27] + -0.9428090415820412 * sp[31] + -0.9428090415821075 * sp[32] + 3.771236166328315 * sp[27] + -3.771236166328296 * sp[30];
    A[182] = -5.892556509887905 * sp[33] + -17.44196726926823 * sp[34] + 5.185449728701392 * sp[28] + 5.185449728701384 * sp[31] + -4.006938426723767 * sp[34] + -10.724452847996 * sp[35] + 3.889087296526019 * sp[29] + 5.185449728701371 * sp[32] + 0.235702260395519 * sp[28] + -5.067598598503582 * sp[29] + -1.76776695296638 * sp[26] + -0.4714045207910269 * sp[27] + 1.649915822768625 * sp[31] + 1.649915822768649 * sp[32] + -3.064129385141757 * sp[27] + -1.649915822768611 * sp[30];
    A[183] = 5.892556509887938 * sp[33] + 9.192388155425162 * sp[34] + 5.421151989096872 * sp[28] + 9.192388155425121 * sp[31] + 7.542472332656519 * sp[34] + 8.367430244040806 * sp[35] + 5.067598598503622 * sp[29] + 5.8925565098879 * sp[32] + -10.84230397819378 * sp[28] + -4.360491817317081 * sp[29] + -18.9740319618391 * sp[26] + -6.835365551470034 * sp[27] + -5.185449728701403 * sp[31] + -5.185449728701428 * sp[32] + -5.185449728701371 * sp[27] + -4.006938426723815 * sp[30];
    A[184] = -11.78511301977584 * sp[33] + -20.74179891480548 * sp[34] + -8.485281374238555 * sp[28] + -20.74179891480541 * sp[31] + -8.013876853447552 * sp[34] + -14.3778378841265 * sp[35] + -3.064129385141705 * sp[29] + -9.428090415820673 * sp[32] + 0.4714045207910518 * sp[28] + -3.064129385141686 * sp[29] + 2.592724864350696 * sp[26] + 1.885618083164132 * sp[27] + 3.299831645537263 * sp[31] + 3.299831645537282 * sp[32] + 3.299831645537234 * sp[27] + 5.65685424949238 * sp[30];
    A[185] = -5.892556509887912 * sp[33] + 11.54941075938032 * sp[34] + -11.07800623858928 * sp[28] + 11.54941075938033 * sp[31] + -1.885618083164143 * sp[34] + 4.831896338108117 * sp[35] + -3.181980515339478 * sp[29] + 3.53553390593282 * sp[32] + -6.128258770283393 * sp[28] + 6.246109900481162 * sp[29] + -13.08147545195113 * sp[26] + 4.949747468305826 * sp[27] + -0.4714045207910164 * sp[31] + -0.4714045207910638 * sp[32] + -0.4714045207909954 * sp[27] + -1.649915822768623 * sp[30];
    A[186] = 2.357022603955144 * sp[33] + 4.00693842672373 * sp[34] + 4.00693842672381 * sp[28] + 4.006938426723792 * sp[31] + 0.2357022603954944 * sp[34] + -0.2357022603955068 * sp[35] + 4.478342947514786 * sp[29] + 4.006938426723764 * sp[32] + -11.07800623858928 * sp[28] + -12.9636243217534 * sp[29] + -8.249579113843067 * sp[26] + -8.720983634634093 * sp[27] + -7.77817459305208 * sp[31] + -8.720983634634075 * sp[32] + -7.778174593052103 * sp[27] + -7.542472332656555 * sp[30];
    A[187] = -0.942809041582076 * sp[34] + -0.9428090415820773 * sp[28] + -0.9428090415820914 * sp[31] + 1.885618083164134 * sp[34] + 0.4714045207910313 * sp[35] + 0.4714045207910822 * sp[29] + -0.9428090415820432 * sp[32] + 24.5130350811337 * sp[28] + 11.78511301977579 * sp[29] + 11.78511301977579 * sp[26] + 10.37089945740265 * sp[27] + 13.19932658214897 * sp[31] + 5.656854249492408 * sp[32] + 13.199326582149 * sp[27] + 8.013876853447583 * sp[30];
    A[188] = -2.357022603955149 * sp[33] + 1.649915822768701 * sp[34] + 1.649915822768625 * sp[28] + 1.649915822768667 * sp[31] + -2.121320343559621 * sp[34] + 2.121320343559713 * sp[35] + -2.592724864350683 * sp[29] + 1.649915822768645 * sp[32] + -13.43502884254442 * sp[28] + 3.535533905932796 * sp[29] + -1.178511301977569 * sp[26] + 3.064129385141772 * sp[27] + -5.421151989096893 * sp[31] + 3.064129385141736 * sp[32] + -5.42115198909692 * sp[27] + 1.885618083164161 * sp[30];
    A[189] = -33.33333333333353 * sp[33] + -46.66666666666691 * sp[34] + -6.666666666666721 * sp[28] + -6.666666666666794 * sp[31] + -26.66666666666677 * sp[34] + -36.66666666666687 * sp[35] + 3.333333333333155 * sp[29] + -6.666666666666883 * sp[32] + 13.33333333333347 * sp[28] + 3.333333333333378 * sp[29] + -36.66666666666664 * sp[26] + -46.6666666666667 * sp[27] + 13.33333333333352 * sp[31] + 13.33333333333336 * sp[32] + -26.66666666666683 * sp[27] + -33.33333333333357 * sp[30];
    A[190] = 28.57738033247026 * sp[33] + 8.164965809276811 * sp[34] + 8.164965809277369 * sp[28] + 8.164965809277152 * sp[31] + -4.082482904639178 * sp[34] + -22.45365597551272 * sp[35] + 26.53613888015088 * sp[29] + 8.164965809276971 * sp[32] + 69.40220937885685 * sp[28] + -22.4536559755126 * sp[29] + -71.44345083117602 * sp[26] + -89.81462390205002 * sp[27] + -4.082482904638951 * sp[31] + -28.57738033247043 * sp[32] + -53.0722777603026 * sp[27] + -69.40220937885721 * sp[30];
    A[191] = -58.92556509887908 * sp[33] + -18.85618083164126 * sp[34] + 37.71236166328288 * sp[28] + 37.71236166328273 * sp[31] + -25.92724864350678 * sp[34] + -22.39171473757404 * sp[35] + 34.17682775734995 * sp[29] + 37.71236166328272 * sp[32] + -40.06938426723783 * sp[28] + 5.892556509887861 * sp[29] + 5.892556509887816 * sp[26] + 9.428090415820545 * sp[27] + 2.357022603955194 * sp[31] + -11.78511301977596 * sp[32] + 2.35702260395501 * sp[27] + -2.357022603955118 * sp[30];
    A[192] = 66.66666666666686 * sp[33] + 33.33333333333344 * sp[34] + 33.3333333333333 * sp[28] + -6.666666666666817 * sp[31] + 33.33333333333344 * sp[34] + 33.33333333333329 * sp[35] + -6.666666666666654 * sp[29] + -6.666666666666681 * sp[32] + 33.3333333333333 * sp[28] + -6.666666666666654 * sp[29] + 113.3333333333335 * sp[26] + 33.33333333333348 * sp[27] + -6.666666666666817 * sp[31] + -6.666666666666681 * sp[32] + 33.33333333333348 * sp[27] + 26.66666666666704 * sp[30];
    A[193] = 12.24744871391601 * sp[34] + 12.24744871391598 * sp[28] + 12.24744871391603 * sp[31] + 36.74234614174757 * sp[34] + 24.49489742783164 * sp[35] + 24.49489742783178 * sp[29] + 12.24744871391588 * sp[32] + -110.2270384252434 * sp[28] + -48.98979485566382 * sp[29] + -48.9897948556639 * sp[26] + 36.74234614174735 * sp[27] + -36.74234614174794 * sp[31] + -36.7423461417482 * sp[32] + 12.2474487139158 * sp[27] + 24.49489742783149 * sp[30];
    A[194] = 117.8511301977583 * sp[33] + 58.92556509887912 * sp[34] + 58.92556509887895 * sp[28] + 2.357022603954972 * sp[31] + 58.92556509887913 * sp[34] + 58.92556509887888 * sp[35] + 2.357022603955189 * sp[29] + 2.357022603954563 * sp[32] + 58.92556509887872 * sp[28] + -11.78511301977581 * sp[29] + 44.78342947514791 * sp[26] + -11.78511301977586 * sp[27] + -11.78511301977611 * sp[31] + -11.78511301977585 * sp[32] + -11.78511301977601 * sp[27] + -9.428090415820972 * sp[30];
    A[195] = -16.88749537379663 * sp[33] + -5.196152422706678 * sp[34] + 5.196152422706637 * sp[28] + 5.196152422706613 * sp[31] + -7.361215932167761 * sp[34] + -6.278684177437281 * sp[35] + 11.90784930203616 * sp[29] + 5.196152422706662 * sp[32] + -7.361215932167781 * sp[28] + 4.979646071760492 * sp[29] + -21.86714144555711 * sp[26] + -1.732050807568852 * sp[27] + 3.89711431702995 * sp[31] + 3.897114317029925 * sp[32] + -15.15544456622757 * sp[27] + -3.897114317029895 * sp[30];
    A[196] = 7.794228634059952 * sp[33] + -2.598076211353306 * sp[34] + 2.598076211353317 * sp[28] + 2.598076211353361 * sp[31] + 1.732050807568857 * sp[34] + -0.4330127018921415 * sp[35] + -2.165063509461183 * sp[29] + 2.598076211353383 * sp[32] + 1.73205080756888 * sp[28] + -5.629165124598764 * sp[29] + 13.42339375865884 * sp[26] + -0.8660254037845294 * sp[27] + -3.464101615137752 * sp[31] + -3.464101615137686 * sp[32] + 8.660254037844366 * sp[27] + -5.196152422706595 * sp[30];
    A[197] = -3.897114317029966 * sp[33] + -5.196152422706612 * sp[34] + 5.19615242270665 * sp[28] + 5.19615242270663 * sp[31] + -3.031088913245543 * sp[34] + -4.113620667976112 * sp[35] + 5.412658773652797 * sp[29] + 5.196152422706616 * sp[32] + -3.031088913245549 * sp[28] + -1.515544456622847 * sp[29] + -2.3815698604072 * sp[26] + -1.732050807568825 * sp[27] + -0.4330127018922441 * sp[31] + -0.4330127018922686 * sp[32] + -2.165063509461074 * sp[27] + 0.4330127018921925 * sp[30];
    A[198] = 16.88749537379662 * sp[33] + 11.69134295108995 * sp[34] + 22.08364779650327 * sp[28] + 11.69134295108998 * sp[31] + 9.526279441628885 * sp[34] + 10.60881119635945 * sp[35] + 2.814582562299471 * sp[29] + 3.897114317030023 * sp[32] + 9.526279441628889 * sp[28] + -0.6495190528382953 * sp[29] + 36.58957330989253 * sp[26] + 19.48557158514986 * sp[27] + -1.732050807568834 * sp[31] + -1.732050807568835 * sp[32] + -1.732050807568875 * sp[27] + 0.4330127018922201 * sp[30];
    A[199] = -7.79422863405996 * sp[33] + -10.39230484541326 * sp[34] + -5.196152422706636 * sp[28] + -10.39230484541323 * sp[31] + -6.062177826491106 * sp[34] + -8.227241335952209 * sp[35] + -1.299038105676673 * sp[29] + -3.464101615137745 * sp[32] + -6.06217782649111 * sp[28] + -3.031088913245626 * sp[29] + -16.88749537379652 * sp[26] + -17.32050807568877 * sp[27] + -0.8660254037844821 * sp[31] + -0.8660254037844938 * sp[32] + -0.8660254037844624 * sp[27] + 3.464101615137751 * sp[30];
    A[200] = 3.897114317029963 * sp[33] + -1.299038105676662 * sp[34] + 9.093266739736631 * sp[28] + -1.29903810567664 * sp[31] + 0.8660254037844216 * sp[34] + -0.2165063509460583 * sp[35] + 0.6495190528382957 * sp[29] + -0.4330127018921748 * sp[32] + 0.866025403784433 * sp[28] + -2.814582562299342 * sp[29] + 8.443747686898302 * sp[26] + -2.165063509461009 * sp[27] + -1.732050807568873 * sp[31] + -1.73205080756882 * sp[32] + -1.732050807568874 * sp[27] + -3.897114317029959 * sp[30];
    A[201] = 10.39230484541331 * sp[33] + 11.69134295108996 * sp[34] + 11.69134295108995 * sp[28] + 11.69134295108995 * sp[31] + 7.361215932167806 * sp[34] + 6.062177826491077 * sp[35] + 12.99038105676667 * sp[29] + 11.69134295108998 * sp[32] + 7.361215932167699 * sp[28] + 12.99038105676654 * sp[29] + -7.794228634059924 * sp[26] + -3.897114317029965 * sp[27] + -6.495190528383238 * sp[31] + -8.227241335952156 * sp[32] + -6.495190528383207 * sp[27] + -6.062177826491018 * sp[30];
    A[202] = -20.78460969082661 * sp[33] + -10.39230484541329 * sp[34] + -10.39230484541328 * sp[28] + -10.39230484541325 * sp[31] + -10.3923048454134 * sp[34] + -3.464101615137805 * sp[35] + -17.32050807568892 * sp[29] + -10.39230484541332 * sp[32] + -10.39230484541325 * sp[28] + -17.32050807568876 * sp[29] + 24.24871130596428 * sp[26] + 3.464101615137735 * sp[27] + 17.32050807568867 * sp[31] + 3.464101615137671 * sp[32] + 17.32050807568863 * sp[27] + 7.794228634059813 * sp[30];
    A[203] = 10.39230484541331 * sp[33] + -1.29903810567668 * sp[34] + -1.299038105676667 * sp[28] + -1.299038105676708 * sp[31] + 3.031088913245604 * sp[34] + -2.598076211353348 * sp[35] + 4.330127018922273 * sp[29] + -1.299038105676706 * sp[32] + 3.031088913245552 * sp[28] + 4.330127018922259 * sp[29] + -16.45448267190435 * sp[26] + 0.4330127018922889 * sp[27] + -10.82531754730544 * sp[31] + 4.763139720814386 * sp[32] + -10.82531754730543 * sp[27] + 2.598076211353331 * sp[30];
    A[204] = -36.74234614174787 * sp[33] + -36.74234614174773 * sp[34] + 36.74234614174769 * sp[28] + 36.74234614174775 * sp[31] + -24.49489742783201 * sp[34] + -30.61862178478968 * sp[35] + 42.8660704987058 * sp[29] + 36.74234614174801 * sp[32] + -24.494897427832 * sp[28] + -6.123724356958164 * sp[29] + -30.61862178478969 * sp[26] + -12.24744871391611 * sp[27] + -24.49489742783147 * sp[27] + -36.74234614174721 * sp[30];
    A[205] = -67.50000000000037 * sp[33] + 90.00000000000011 * sp[28] + 90.00000000000024 * sp[31] + 7.500000000000139 * sp[34] + 3.750000000000063 * sp[35] + 93.75000000000044 * sp[29] + 90.00000000000065 * sp[32] + 7.499999999999073 * sp[28] + 48.74999999999943 * sp[29] + -41.24999999999983 * sp[26] + -30.00000000000031 * sp[27] + 52.50000000000031 * sp[31] + -22.49999999999968 * sp[32] + -37.49999999999935 * sp[27] + -67.4999999999993 * sp[30];
    A[206] = 12.99038105676684 * sp[33] + -25.98076211353297 * sp[34] + 25.98076211353327 * sp[28] + 25.98076211353322 * sp[31] + -4.330127018922152 * sp[34] + 10.82531754730572 * sp[35] + 10.82531754730559 * sp[29] + 25.98076211353298 * sp[32] + -4.3301270189222 * sp[28] + 2.165063509460659 * sp[29] + 36.80607966083873 * sp[26] + -8.660254037844062 * sp[27] + -12.99038105676674 * sp[31] + 12.99038105676648 * sp[32] + 21.65063509461087 * sp[27] + 12.99038105676617 * sp[30];
    A[207] = 36.74234614174757 * sp[34] + -110.2270384252434 * sp[28] + -36.74234614174794 * sp[31] + 12.24744871391601 * sp[34] + 24.49489742783164 * sp[35] + -48.98979485566382 * sp[29] + -36.7423461417482 * sp[32] + 12.24744871391598 * sp[28] + 24.49489742783178 * sp[29] + -48.9897948556639 * sp[26] + 12.2474487139158 * sp[27] + 12.24744871391603 * sp[31] + 12.24744871391588 * sp[32] + 36.74234614174735 * sp[27] + 24.49489742783149 * sp[30];
    A[208] = 135.0000000000005 * sp[33] + 67.50000000000033 * sp[34] + 67.50000000000037 * sp[28] + -22.49999999999972 * sp[31] + 67.50000000000033 * sp[34] + 67.50000000000061 * sp[35] + -22.49999999999995 * sp[29] + -22.49999999999973 * sp[32] + 67.50000000000037 * sp[28] + -22.49999999999995 * sp[29] + 247.4999999999996 * sp[26] + 67.4999999999999 * sp[27] + -22.49999999999972 * sp[31] + -22.49999999999973 * sp[32] + 67.4999999999999 * sp[27] + 59.99999999999978 * sp[30];
    A[209] = 64.95190528383276 * sp[34] + -38.97114317029981 * sp[28] + 12.99038105676651 * sp[31] + 21.65063509461125 * sp[34] + 43.30127018922174 * sp[35] + -8.6602540378441 * sp[29] + 12.99038105676676 * sp[32] + 21.65063509461113 * sp[28] + 43.30127018922189 * sp[29] + -8.660254037844727 * sp[26] + 99.59292143520966 * sp[27] + 21.65063509461114 * sp[31] + 21.65063509461091 * sp[32] + -12.99038105676653 * sp[27] + 43.30127018922241 * sp[30];
    A[210] = 10.41666666666664 * sp[33] + -5.833333333333369 * sp[34] + 0.8333333333333577 * sp[28] + 0.8333333333333975 * sp[31] + -2.916666666666663 * sp[34] + -4.375000000000005 * sp[35] + -3.541666666666716 * sp[29] + 0.8333333333333282 * sp[32] + 10.08333333333332 * sp[28] + -2.875000000000027 * sp[29] + 7.958333333333427 * sp[26] + 1.833333333333381 * sp[27] + -1.416666666666676 * sp[31] + -1.416666666666771 * sp[32] + 3.583333333333347 * sp[27] + 2.916666666666675 * sp[30];
    A[211] = -20.83333333333338 * sp[33] + 15.83333333333339 * sp[34] + -5.833333333333378 * sp[28] + -5.833333333333443 * sp[31] + -6.666666666666711 * sp[34] + 4.583333333333399 * sp[35] + 2.916666666666654 * sp[29] + -5.833333333333412 * sp[32] + -12.66666666666666 * sp[28] + 11.58333333333335 * sp[29] + -10.08333333333341 * sp[26] + 2.166666666666622 * sp[27] + 0.3333333333333607 * sp[31] + 0.3333333333335378 * sp[32] + -1.333333333333364 * sp[27] + 13.33333333333324 * sp[30];
    A[212] = -10.41666666666668 * sp[33] + -30.83333333333342 * sp[34] + 9.166666666666748 * sp[28] + 9.166666666666728 * sp[31] + -7.083333333333331 * sp[34] + -18.95833333333338 * sp[35] + 6.875000000000018 * sp[29] + 9.166666666666707 * sp[32] + -4.083333333333327 * sp[28] + -12.45833333333335 * sp[29] + 3.37500000000005 * sp[26] + 0.1666666666666896 * sp[27] + -0.5833333333333133 * sp[31] + -0.5833333333333821 * sp[32] + 1.083333333333331 * sp[27] + -12.91666666666668 * sp[30];
    A[213] = 10.41666666666675 * sp[33] + 16.25000000000009 * sp[34] + 9.583333333333364 * sp[28] + 16.25000000000001 * sp[31] + 13.33333333333336 * sp[34] + 14.79166666666666 * sp[35] + 8.958333333333387 * sp[29] + 10.41666666666667 * sp[32] + 0.3333333333333517 * sp[28] + 3.291666666666714 * sp[29] + 7.458333333333284 * sp[26] + 9.416666666666638 * sp[27] + 1.833333333333312 * sp[31] + 1.833333333333337 * sp[32] + 1.833333333333295 * sp[27] + 2.916666666666624 * sp[30];
    A[214] = -20.83333333333341 * sp[33] + -36.66666666666681 * sp[34] + -14.99999999999997 * sp[28] + -36.66666666666671 * sp[31] + -14.16666666666669 * sp[34] + -25.41666666666672 * sp[35] + -5.416666666666662 * sp[29] + -16.66666666666674 * sp[32] + -8.16666666666667 * sp[28] + -12.4166666666667 * sp[29] + -12.41666666666661 * sp[26] + -24.66666666666664 * sp[27] + -1.166666666666631 * sp[31] + -1.166666666666671 * sp[32] + -1.166666666666606 * sp[27] + 10.00000000000008 * sp[30];
    A[215] = -10.41666666666669 * sp[33] + 20.41666666666674 * sp[34] + -19.58333333333339 * sp[28] + 20.41666666666676 * sp[31] + -3.333333333333361 * sp[34] + 8.541666666666739 * sp[35] + -5.625000000000025 * sp[29] + 6.250000000000139 * sp[32] + -6.333333333333327 * sp[28] + 12.04166666666668 * sp[29] + -12.12500000000003 * sp[26] + 15.25 * sp[27] + 0.1666666666666783 * sp[31] + 0.1666666666668162 * sp[32] + 0.166666666666679 * sp[27] + -12.91666666666648 * sp[30];
    A[216] = 4.166666666666654 * sp[33] + 7.083333333333274 * sp[34] + 7.083333333333419 * sp[28] + 7.083333333333385 * sp[31] + 0.4166666666666359 * sp[34] + -0.4166666666666483 * sp[35] + 7.916666666666652 * sp[29] + 7.083333333333331 * sp[32] + 8.41666666666667 * sp[28] + 13.58333333333326 * sp[29] + 1.916666666666731 * sp[26] + 3.083333333333362 * sp[27] + 2.749999999999962 * sp[31] + -8.916666666666865 * sp[32] + 2.749999999999981 * sp[27] + -3.333333333333434 * sp[30];
    A[217] = -1.6666666666667 * sp[34] + -1.666666666666714 * sp[28] + -1.666666666666731 * sp[31] + 3.333333333333331 * sp[34] + 0.8333333333333277 * sp[35] + 0.8333333333333992 * sp[29] + -1.666666666666642 * sp[32] + -12.6666666666667 * sp[28] + -7.166666666666657 * sp[29] + -7.16666666666678 * sp[26] + -3.666666666666713 * sp[27] + -4.66666666666667 * sp[31] + -7.999999999999928 * sp[32] + -4.666666666666674 * sp[27] + -5.833333333333282 * sp[30];
    A[218] = -4.166666666666631 * sp[33] + 2.916666666666818 * sp[34] + 2.916666666666699 * sp[28] + 2.916666666666762 * sp[31] + -3.749999999999956 * sp[34] + 3.750000000000114 * sp[35] + -4.583333333333338 * sp[29] + 2.916666666666722 * sp[32] + 4.250000000000028 * sp[28] + -2.24999999999995 * sp[29] + 9.416666666666742 * sp[26] + -1.083333333333297 * sp[27] + 1.916666666666701 * sp[31] + -13.08333333333321 * sp[32] + 1.916666666666693 * sp[27] + -6.666666666666609 * sp[30];
    A[219] = -58.92556509887932 * sp[33] + -82.49579113843095 * sp[34] + -11.78511301977584 * sp[28] + -11.78511301977594 * sp[31] + -47.14045207910335 * sp[34] + -64.8181216087672 * sp[35] + 5.892556509887626 * sp[29] + -11.78511301977611 * sp[32] + -18.85618083164131 * sp[28] + -22.39171473757409 * sp[29] + -8.249579113842961 * sp[26] + 16.49915822768611 * sp[27] + -4.714045207910259 * sp[31] + 80.13876853447549 * sp[32] + 9.428090415820538 * sp[27] + 54.21151989096823 * sp[30];
    A[220] = 50.51814855409187 * sp[33] + 14.43375672973987 * sp[34] + 14.43375672974095 * sp[28] + 14.43375672974059 * sp[31] + -7.21687836487126 * sp[34] + -39.69283100678719 * sp[35] + 46.90970937165679 * sp[29] + 14.43375672974024 * sp[32] + 44.74464586219594 * sp[28] + 72.89047148518975 * sp[29] + -13.71206889325337 * sp[26] + 31.75426480542949 * sp[27] + 105.3664241271056 * sp[31] + 62.06515393788339 * sp[32] + 18.76388374866262 * sp[27] + 50.51814855409124 * sp[30];
    A[221] = -104.1666666666668 * sp[33] + -33.33333333333336 * sp[34] + 66.66666666666724 * sp[28] + 66.66666666666698 * sp[31] + -45.83333333333338 * sp[34] + -39.58333333333339 * sp[35] + 60.41666666666693 * sp[29] + 66.66666666666697 * sp[32] + -55.83333333333331 * sp[28] + 5.416666666666673 * sp[29] + 5.416666666666846 * sp[26] + -3.333333333333245 * sp[27] + -0.8333333333331452 * sp[31] + -25.83333333333367 * sp[32] + -0.8333333333334014 * sp[27] + -104.1666666666667 * sp[30];
    A[222] = 117.8511301977583 * sp[33] + 58.92556509887913 * sp[34] + 58.92556509887872 * sp[28] + -11.78511301977611 * sp[31] + 58.92556509887912 * sp[34] + 58.92556509887888 * sp[35] + -11.78511301977581 * sp[29] + -11.78511301977585 * sp[32] + 58.92556509887895 * sp[28] + 2.357022603955189 * sp[29] + 44.78342947514791 * sp[26] + -11.78511301977601 * sp[27] + 2.357022603954972 * sp[31] + 2.357022603954563 * sp[32] + -11.78511301977586 * sp[27] + -9.428090415820972 * sp[30];
    A[223] = 21.65063509461125 * sp[34] + 21.65063509461113 * sp[28] + 21.65063509461114 * sp[31] + 64.95190528383276 * sp[34] + 43.30127018922174 * sp[35] + 43.30127018922189 * sp[29] + 21.65063509461091 * sp[32] + -38.97114317029981 * sp[28] + -8.6602540378441 * sp[29] + -8.660254037844727 * sp[26] + -12.99038105676653 * sp[27] + 12.99038105676651 * sp[31] + 12.99038105676676 * sp[32] + 99.59292143520966 * sp[27] + 43.30127018922241 * sp[30];
    A[224] = 208.3333333333338 * sp[33] + 104.166666666667 * sp[34] + 104.1666666666666 * sp[28] + 4.166666666666339 * sp[31] + 104.166666666667 * sp[34] + 104.1666666666665 * sp[35] + 4.166666666666716 * sp[29] + 4.16666666666567 * sp[32] + 104.1666666666666 * sp[28] + 4.166666666666716 * sp[29] + 104.1666666666666 * sp[26] + 4.166666666666558 * sp[27] + 4.166666666666339 * sp[31] + 4.16666666666567 * sp[32] + 4.166666666666558 * sp[27] + 183.3333333333318 * sp[30];
  }

};


class forms_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  forms_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~forms_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    alignas(32) double sp[20];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = sp[3] * sp[3];
    sp[6] = sp[3] * sp[4];
    sp[7] = sp[4] * sp[4];
    sp[8] = J_c3 / sp[2];
    sp[9] = -1 * J_c2 / sp[2];
    sp[10] = sp[9] * sp[9];
    sp[11] = sp[8] * sp[9];
    sp[12] = sp[8] * sp[8];
    sp[13] = sp[5] + sp[10];
    sp[14] = sp[6] + sp[11];
    sp[15] = sp[12] + sp[7];
    sp[16] = std::abs(sp[2]);
    sp[17] = sp[13] * sp[16];
    sp[18] = sp[14] * sp[16];
    sp[19] = sp[15] * sp[16];
    A[0] = 0.0216269841269843 * sp[19] + -0.01116071428571434 * sp[18] + -0.01116071428571434 * sp[18] + 0.05734126984127031 * sp[17];
    A[1] = -0.02986111111111116 * sp[19] + 0.005952380952380897 * sp[18] + 0.009920634920634965 * sp[18] + -0.04871031746031779 * sp[17];
    A[2] = 0.01765873015873004 * sp[19] + -0.004712301587301555 * sp[18] + -0.00471230158730158 * sp[18] + 0.01765873015873019 * sp[17];
    A[3] = -0.0154265873015874 * sp[19] + -0.02447916666666678 * sp[18] + 0.009052579365079402 * sp[18] + 0.01860119047619064 * sp[17];
    A[4] = 0.01746031746031734 * sp[19] + 0.0216765873015871 * sp[18] + -0.005704365079365076 * sp[18] + -0.01190476190476188 * sp[17];
    A[5] = -0.02385912698412694 * sp[19] + -0.0326636904761905 * sp[18] + 0.006820436507936526 * sp[18] + 0.01116071428571415 * sp[17];
    A[6] = -0.01314484126984127 * sp[19] + -0.008804563492063542 * sp[18] + 0.03067956349206367 * sp[18] + 0.02385912698412711 * sp[17];
    A[7] = 0.02777777777777797 * sp[19] + 0.01413690476190485 * sp[18] + -0.07276785714285776 * sp[18] + -0.06111111111111159 * sp[17];
    A[8] = -0.02058531746031759 * sp[19] + -0.00706845238095235 * sp[18] + 0.05820932539682568 * sp[18] + 0.05114087301587339 * sp[17];
    A[9] = 0.04349267900155099 * sp[19] + -0.02314932914598858 * sp[18] + -0.06243303921190619 * sp[18] + 0.03507474113028568 * sp[17];
    A[10] = 0.06529556615835218 * sp[19] + -0.05154913117764576 * sp[18] + -0.1271545235715238 * sp[18] + 0.06529556615835092 * sp[17];
    A[11] = -0.01686507936508175 * sp[19] + -0.007440476190475829 * sp[18] + 0.07192460317460291 * sp[18] + -0.01091269841269927 * sp[17];
    A[12] = 0.03507474113028575 * sp[19] + 0.1283735525368423 * sp[18] + -0.01192541198429715 * sp[18] + -0.1248660784238147 * sp[17];
    A[13] = -0.1005208057964093 * sp[19] + -0.06314768569261558 * sp[18] + 0.07088005536926223 * sp[18] + -0.08505606644311368 * sp[17];
    A[14] = 0.06200396825396927 * sp[19] + 0.09598214285714152 * sp[18] + -0.02108134920634938 * sp[18] + 0.05307539682539863 * sp[17];
    A[15] = -0.02986111111111116 * sp[19] + 0.009920634920634965 * sp[18] + 0.005952380952380897 * sp[18] + -0.04871031746031779 * sp[17];
    A[16] = 0.06865079365079392 * sp[19] + -0.01289682539682547 * sp[18] + -0.01289682539682547 * sp[18] + 0.06865079365079431 * sp[17];
    A[17] = -0.04871031746031749 * sp[19] + 0.005952380952380871 * sp[18] + 0.009920634920634983 * sp[18] + -0.02986111111111135 * sp[17];
    A[18] = 0.01746031746031736 * sp[19] + 0.02316468253968244 * sp[18] + -0.004216269841269787 * sp[18] + -0.01041666666666667 * sp[17];
    A[19] = -0.0438492063492063 * sp[19] + -0.05327380952380954 * sp[18] + 0.009424603174603221 * sp[18] + 0.01785714285714289 * sp[17];
    A[20] = 0.06111111111111131 * sp[19] + 0.07524801587301624 * sp[18] + -0.01165674603174611 * sp[18] + -0.02529761904761912 * sp[17];
    A[21] = 0.01041666666666662 * sp[19] + 0.004216269841269746 * sp[18] + -0.02316468253968261 * sp[18] + -0.01746031746031751 * sp[17];
    A[22] = -0.01785714285714289 * sp[19] + -0.009424603174603181 * sp[18] + 0.0532738095238099 * sp[18] + 0.0438492063492066 * sp[17];
    A[23] = 0.02529761904761927 * sp[19] + 0.01165674603174611 * sp[18] + -0.07524801587301651 * sp[18] + -0.06111111111111166 * sp[17];
    A[24] = -0.07856742013183705 * sp[19] + -0.009820927516479956 * sp[18] + 0.1360899955855054 * sp[18] + 0.07014948226057126 * sp[17];
    A[25] = -0.05326743555023475 * sp[19] + -0.008591521862941607 * sp[18] + 0.1838585678669348 * sp[18] + 0.08419691425682223 * sp[17];
    A[26] = -0.004960317460314048 * sp[19] + 0.01984126984126912 * sp[18] + -0.1626984126984123 * sp[18] + -0.1021825396825407 * sp[17];
    A[27] = -0.07014948226057142 * sp[19] + -0.1360899955855052 * sp[18] + 0.009820927516479927 * sp[18] + 0.07856742013183712 * sp[17];
    A[28] = 0.04639421805988007 * sp[19] + 0.04897167461876199 * sp[18] + -0.01288728279441046 * sp[18] + 0.03092947870658588 * sp[17];
    A[29] = -0.1240079365079386 * sp[19] + -0.2405753968253958 * sp[18] + 0.01736111111111117 * sp[18] + 0.04365079365079513 * sp[17];
    A[30] = 0.01765873015873004 * sp[19] + -0.00471230158730158 * sp[18] + -0.004712301587301555 * sp[18] + 0.01765873015873019 * sp[17];
    A[31] = -0.04871031746031749 * sp[19] + 0.009920634920634983 * sp[18] + 0.005952380952380871 * sp[18] + -0.02986111111111135 * sp[17];
    A[32] = 0.0573412698412701 * sp[19] + -0.01116071428571432 * sp[18] + -0.01116071428571432 * sp[18] + 0.02162698412698438 * sp[17];
    A[33] = -0.02385912698412705 * sp[19] + -0.03067956349206361 * sp[18] + 0.008804563492063556 * sp[18] + 0.0131448412698413 * sp[17];
    A[34] = 0.06111111111111144 * sp[19] + 0.07276785714285763 * sp[18] + -0.01413690476190487 * sp[18] + -0.02777777777777795 * sp[17];
    A[35] = -0.05114087301587315 * sp[19] + -0.05820932539682561 * sp[18] + 0.007068452380952334 * sp[18] + 0.02058531746031753 * sp[17];
    A[36] = -0.01860119047619064 * sp[19] + -0.00905257936507939 * sp[18] + 0.02447916666666687 * sp[18] + 0.01542658730158747 * sp[17];
    A[37] = 0.01190476190476194 * sp[19] + 0.00570436507936506 * sp[18] + -0.02167658730158732 * sp[18] + -0.01746031746031749 * sp[17];
    A[38] = -0.01116071428571433 * sp[19] + -0.006820436507936544 * sp[18] + 0.03266369047619069 * sp[18] + 0.02385912698412714 * sp[17];
    A[39] = 0.1248660784238151 * sp[19] + 0.01192541198429715 * sp[18] + -0.1283735525368424 * sp[18] + -0.03507474113028569 * sp[17];
    A[40] = -0.003436608745177672 * sp[19] + -0.01718304372588151 * sp[18] + -0.0515491311776443 * sp[18] + -0.003436608745176435 * sp[17];
    A[41] = 0.1001984126984115 * sp[19] + -0.07192460317460353 * sp[18] + 0.1026785714285716 * sp[18] + 0.1180555555555574 * sp[17];
    A[42] = -0.03507474113028564 * sp[19] + 0.06243303921190629 * sp[18] + 0.02314932914598861 * sp[18] + -0.04349267900155099 * sp[17];
    A[43] = -0.02319710902993948 * sp[19] + 0.001288728279440978 * sp[18] + 0.03221820698602831 * sp[18] + -0.01804219591217489 * sp[17];
    A[44] = -0.06200396825396921 * sp[19] + 0.1460813492063474 * sp[18] + 0.04092261904761985 * sp[18] + -0.06498015873016053 * sp[17];
    A[45] = -0.0154265873015874 * sp[19] + 0.009052579365079402 * sp[18] + -0.02447916666666678 * sp[18] + 0.01860119047619064 * sp[17];
    A[46] = 0.01746031746031736 * sp[19] + -0.004216269841269787 * sp[18] + 0.02316468253968244 * sp[18] + -0.01041666666666667 * sp[17];
    A[47] = -0.02385912698412705 * sp[19] + 0.008804563492063556 * sp[18] + -0.03067956349206361 * sp[18] + 0.0131448412698413 * sp[17];
    A[48] = 0.02162698412698437 * sp[19] + 0.03278769841269873 * sp[18] + 0.03278769841269873 * sp[18] + 0.1012896825396832 * sp[17];
    A[49] = -0.02986111111111129 * sp[19] + -0.03581349206349221 * sp[18] + -0.03978174603174632 * sp[18] + -0.0944444444444448 * sp[17];
    A[50] = 0.01765873015873009 * sp[19] + 0.02237103174603169 * sp[18] + 0.02237103174603169 * sp[18] + 0.04474206349206338 * sp[17];
    A[51] = 0.02058531746031763 * sp[19] + 0.01351686507936523 * sp[18] + 0.07879464285714327 * sp[18] + 0.02058531746031763 * sp[17];
    A[52] = -0.02777777777777803 * sp[19] + -0.01364087301587312 * sp[18] + -0.1005456349206357 * sp[18] + -0.0252976190476193 * sp[17];
    A[53] = 0.0131448412698413 * sp[19] + 0.004340277777777728 * sp[18] + 0.0438244047619049 * sp[18] + 0.01116071428571432 * sp[17];
    A[54] = -0.07856742013183698 * sp[19] + 0.02665680325901709 * sp[18] + -0.152925871328041 * sp[18] + 0.04208968935634277 * sp[17];
    A[55] = -0.03522523963805745 * sp[19] + 0.07947157723220408 * sp[18] + 0.02104922856420346 * sp[18] + 0.1159855451497027 * sp[17];
    A[56] = -0.04513888888888788 * sp[19] + 0.04340277777777819 * sp[18] + 0.005704365079364827 * sp[18] + 0.05208333333333318 * sp[17];
    A[57] = 0.03507474113028566 * sp[19] + -0.09329881140655688 * sp[18] + 0.04700015311458283 * sp[18] + -0.206239477846075 * sp[17];
    A[58] = 0.1005208057964094 * sp[19] + 0.03737312010379382 * sp[18] + 0.1714008611656716 * sp[18] + 0.1933092419161691 * sp[17];
    A[59] = 0.0620039682539693 * sp[19] + -0.03397817460317261 * sp[18] + 0.083085317460319 * sp[18] + 0.04017857142857451 * sp[17];
    A[60] = 0.01746031746031734 * sp[19] + -0.005704365079365076 * sp[18] + 0.0216765873015871 * sp[18] + -0.01190476190476188 * sp[17];
    A[61] = -0.0438492063492063 * sp[19] + 0.009424603174603221 * sp[18] + -0.05327380952380954 * sp[18] + 0.01785714285714289 * sp[17];
    A[62] = 0.06111111111111144 * sp[19] + -0.01413690476190487 * sp[18] + 0.07276785714285763 * sp[18] + -0.02777777777777795 * sp[17];
    A[63] = -0.02986111111111129 * sp[19] + -0.03978174603174632 * sp[18] + -0.03581349206349221 * sp[18] + -0.0944444444444448 * sp[17];
    A[64] = 0.06865079365079411 * sp[19] + 0.08154761904761973 * sp[18] + 0.08154761904761973 * sp[18] + 0.1630952380952394 * sp[17];
    A[65] = -0.04871031746031754 * sp[19] + -0.05466269841269856 * sp[18] + -0.05863095238095258 * sp[18] + -0.09444444444444487 * sp[17];
    A[66] = -0.02529761904761934 * sp[19] + -0.01364087301587313 * sp[18] + -0.1005456349206357 * sp[18] + -0.02777777777777801 * sp[17];
    A[67] = 0.01785714285714298 * sp[19] + 0.008432539682539694 * sp[18] + 0.07113095238095253 * sp[18] + 0.01785714285714287 * sp[17];
    A[68] = -0.01041666666666669 * sp[19] + -0.006200396825396835 * sp[18] + -0.03358134920634911 * sp[18] + -0.01190476190476188 * sp[17];
    A[69] = 0.148716902392409 * sp[19] + 0.002805979290422912 * sp[18] + 0.2946278254943947 * sp[18];
    A[70] = -0.006873217490354695 * sp[19] + -0.04725337024617508 * sp[18] + -0.1778445025628792 * sp[18] + -0.1030982623552912 * sp[17];
    A[71] = 0.128968253968253 * sp[19] + -0.09176587301587387 * sp[18] + -0.01636904761904674 * sp[18] + -0.1785714285714302 * sp[17];
    A[72] = -0.07014948226057138 * sp[19] + 0.06594051332493439 * sp[18] + -0.07997040977705139 * sp[18] + 0.1346870059402914 * sp[17];
    A[73] = -0.04639421805988025 * sp[19] + 0.002577456558881483 * sp[18] + -0.05928150085429055 * sp[18] + -0.0412393049421147 * sp[17];
    A[74] = -0.1240079365079386 * sp[19] + 0.1165674603174577 * sp[18] + -0.1413690476190499 * sp[18] + 0.1428571428571431 * sp[17];
    A[75] = -0.02385912698412694 * sp[19] + 0.006820436507936526 * sp[18] + -0.0326636904761905 * sp[18] + 0.01116071428571415 * sp[17];
    A[76] = 0.06111111111111131 * sp[19] + -0.01165674603174611 * sp[18] + 0.07524801587301624 * sp[18] + -0.02529761904761912 * sp[17];
    A[77] = -0.05114087301587315 * sp[19] + 0.007068452380952334 * sp[18] + -0.05820932539682561 * sp[18] + 0.02058531746031753 * sp[17];
    A[78] = 0.01765873015873009 * sp[19] + 0.02237103174603169 * sp[18] + 0.02237103174603169 * sp[18] + 0.04474206349206338 * sp[17];
    A[79] = -0.04871031746031754 * sp[19] + -0.05863095238095258 * sp[18] + -0.05466269841269856 * sp[18] + -0.09444444444444487 * sp[17];
    A[80] = 0.05734126984127003 * sp[19] + 0.06850198412698445 * sp[18] + 0.06850198412698445 * sp[18] + 0.1012896825396832 * sp[17];
    A[81] = 0.0111607142857143 * sp[19] + 0.004340277777777708 * sp[18] + 0.0438244047619049 * sp[18] + 0.01314484126984125 * sp[17];
    A[82] = -0.0119047619047619 * sp[19] + -0.006200396825396804 * sp[18] + -0.03358134920634901 * sp[18] + -0.01041666666666649 * sp[17];
    A[83] = 0.01860119047619062 * sp[19] + 0.009548611111111183 * sp[18] + 0.04308035714285734 * sp[18] + 0.01860119047619049 * sp[17];
    A[84] = -0.08979133729352919 * sp[19] + -0.01543288609732566 * sp[18] + -0.1950155606843833 * sp[18] + -0.04208968935634282 * sp[17];
    A[85] = -0.02663371777511703 * sp[19] + -0.01073940232867678 * sp[18] + -0.007302793583500514 * sp[18] + -0.01288728279441214 * sp[17];
    A[86] = -0.03819444444444227 * sp[19] + 0.03596230158730122 * sp[18] + 0.1054067460317487 * sp[18] + 0.1264880952380961 * sp[17];
    A[87] = -0.03507474113028568 * sp[19] + -0.09750778034219171 * sp[18] + -0.05822407027627426 * sp[18] + -0.1641497884897315 * sp[17];
    A[88] = 0.02319710902993938 * sp[19] + 0.02448583730938068 * sp[18] + 0.0554153160159676 * sp[18] + 0.07474624020758425 * sp[17];
    A[89] = -0.06200396825396926 * sp[19] + -0.2080853174603165 * sp[18] + -0.102926587301589 * sp[18] + -0.3139880952380974 * sp[17];
    A[90] = -0.01314484126984127 * sp[19] + 0.03067956349206367 * sp[18] + -0.008804563492063542 * sp[18] + 0.02385912698412711 * sp[17];
    A[91] = 0.01041666666666662 * sp[19] + -0.02316468253968261 * sp[18] + 0.004216269841269746 * sp[18] + -0.01746031746031751 * sp[17];
    A[92] = -0.01860119047619064 * sp[19] + 0.02447916666666687 * sp[18] + -0.00905257936507939 * sp[18] + 0.01542658730158747 * sp[17];
    A[93] = 0.02058531746031763 * sp[19] + 0.07879464285714327 * sp[18] + 0.01351686507936523 * sp[18] + 0.02058531746031763 * sp[17];
    A[94] = -0.02529761904761934 * sp[19] + -0.1005456349206357 * sp[18] + -0.01364087301587313 * sp[18] + -0.02777777777777801 * sp[17];
    A[95] = 0.0111607142857143 * sp[19] + 0.0438244047619049 * sp[18] + 0.004340277777777708 * sp[18] + 0.01314484126984125 * sp[17];
    A[96] = 0.1012896825396833 * sp[19] + 0.03278769841269877 * sp[18] + 0.03278769841269877 * sp[18] + 0.02162698412698439 * sp[17];
    A[97] = -0.09444444444444493 * sp[19] + -0.03978174603174633 * sp[18] + -0.03581349206349226 * sp[18] + -0.02986111111111131 * sp[17];
    A[98] = 0.0447420634920635 * sp[19] + 0.02237103174603179 * sp[18] + 0.02237103174603177 * sp[18] + 0.01765873015873019 * sp[17];
    A[99] = -0.2062394778460755 * sp[19] + 0.04700015311458264 * sp[18] + -0.09329881140655703 * sp[18] + 0.0350747411302855 * sp[17];
    A[100] = 0.1314502845029977 * sp[19] + 0.1576544261849667 * sp[18] + -0.01073940232867415 * sp[18] + 0.1039574145415858 * sp[17];
    A[101] = 0.1473214285714275 * sp[19] + 0.1068948412698425 * sp[18] + 0.04935515873015912 * sp[18] + 0.05605158730158834 * sp[17];
    A[102] = 0.04208968935634285 * sp[19] + -0.152925871328041 * sp[18] + 0.02665680325901715 * sp[18] + -0.07856742013183672 * sp[17];
    A[103] = 0.1030982623552906 * sp[19] + 0.01546473935329258 * sp[18] + 0.07732369676646855 * sp[18] + -0.05670404429540892 * sp[17];
    A[104] = 0.07440476190476326 * sp[19] + 0.01537698412698324 * sp[18] + 0.04712301587301679 * sp[18] + -0.00793650793650792 * sp[17];
    A[105] = 0.02777777777777797 * sp[19] + -0.07276785714285776 * sp[18] + 0.01413690476190485 * sp[18] + -0.06111111111111159 * sp[17];
    A[106] = -0.01785714285714289 * sp[19] + 0.0532738095238099 * sp[18] + -0.009424603174603181 * sp[18] + 0.0438492063492066 * sp[17];
    A[107] = 0.01190476190476194 * sp[19] + -0.02167658730158732 * sp[18] + 0.00570436507936506 * sp[18] + -0.01746031746031749 * sp[17];
    A[108] = -0.02777777777777803 * sp[19] + -0.1005456349206357 * sp[18] + -0.01364087301587312 * sp[18] + -0.0252976190476193 * sp[17];
    A[109] = 0.01785714285714298 * sp[19] + 0.07113095238095253 * sp[18] + 0.008432539682539694 * sp[18] + 0.01785714285714287 * sp[17];
    A[110] = -0.0119047619047619 * sp[19] + -0.03358134920634901 * sp[18] + -0.006200396825396804 * sp[18] + -0.01041666666666649 * sp[17];
    A[111] = -0.09444444444444493 * sp[19] + -0.03581349206349226 * sp[18] + -0.03978174603174633 * sp[18] + -0.02986111111111131 * sp[17];
    A[112] = 0.1630952380952395 * sp[19] + 0.08154761904761978 * sp[18] + 0.08154761904761978 * sp[18] + 0.06865079365079423 * sp[17];
    A[113] = -0.09444444444444494 * sp[19] + -0.0586309523809528 * sp[18] + -0.05466269841269862 * sp[18] + -0.04871031746031776 * sp[17];
    A[114] = 0.1346870059402923 * sp[19] + -0.07997040977705108 * sp[18] + 0.06594051332493445 * sp[18] + -0.07014948226057119 * sp[17];
    A[115] = 0.1030982623552918 * sp[19] + -0.1520699369740541 * sp[18] + 0.1022391101689943 * sp[18] + -0.1305911323167022 * sp[17];
    A[116] = -0.1071428571428565 * sp[19] + 0.01934523809523954 * sp[18] + -0.05605158730158752 * sp[18] + 0.02182539682539773 * sp[17];
    A[117] = 0.2946278254943947 * sp[18] + 0.002805979290422911 * sp[18] + 0.1487169023924086 * sp[17];
    A[118] = -0.2061965247105821 * sp[19] + -0.1030982623552908 * sp[18] + -0.103098262355291 * sp[18] + 0.1082531754730536 * sp[17];
    A[119] = -0.1458333333333373 * sp[18] + 0.00496031746031742 * sp[18] + -0.07043650793651063 * sp[17];
    A[120] = -0.02058531746031759 * sp[19] + 0.05820932539682568 * sp[18] + -0.00706845238095235 * sp[18] + 0.05114087301587339 * sp[17];
    A[121] = 0.02529761904761927 * sp[19] + -0.07524801587301651 * sp[18] + 0.01165674603174611 * sp[18] + -0.06111111111111166 * sp[17];
    A[122] = -0.01116071428571433 * sp[19] + 0.03266369047619069 * sp[18] + -0.006820436507936544 * sp[18] + 0.02385912698412714 * sp[17];
    A[123] = 0.0131448412698413 * sp[19] + 0.0438244047619049 * sp[18] + 0.004340277777777728 * sp[18] + 0.01116071428571432 * sp[17];
    A[124] = -0.01041666666666669 * sp[19] + -0.03358134920634911 * sp[18] + -0.006200396825396835 * sp[18] + -0.01190476190476188 * sp[17];
    A[125] = 0.01860119047619062 * sp[19] + 0.04308035714285734 * sp[18] + 0.009548611111111183 * sp[18] + 0.01860119047619049 * sp[17];
    A[126] = 0.0447420634920635 * sp[19] + 0.02237103174603177 * sp[18] + 0.02237103174603179 * sp[18] + 0.01765873015873019 * sp[17];
    A[127] = -0.09444444444444494 * sp[19] + -0.05466269841269862 * sp[18] + -0.0586309523809528 * sp[18] + -0.04871031746031776 * sp[17];
    A[128] = 0.1012896825396833 * sp[19] + 0.06850198412698465 * sp[18] + 0.06850198412698465 * sp[18] + 0.05734126984127034 * sp[17];
    A[129] = -0.1641497884897317 * sp[19] + -0.05822407027627441 * sp[18] + -0.09750778034219197 * sp[18] + -0.03507474113028575 * sp[17];
    A[130] = -0.2345485468582884 * sp[19] + -0.06142938132002923 * sp[18] + -0.167964252420494 * sp[18] + -0.04209845712841164 * sp[17];
    A[131] = 0.221726190476191 * sp[19] + 0.099454365079366 * sp[18] + 0.1252480158730156 * sp[18] + 0.05109126984127012 * sp[17];
    A[132] = -0.04208968935634283 * sp[19] + -0.195015560684383 * sp[18] + -0.01543288609732567 * sp[18] + -0.08979133729352909 * sp[17];
    A[133] = 0.1030982623552905 * sp[19] + 0.08763352300199814 * sp[18] + 0.02577456558882192 * sp[18] + -0.04639421805987948 * sp[17];
    A[134] = -0.07440476190476293 * sp[19] + -0.05902777777777945 * sp[18] + -0.0272817460317463 * sp[18] + -0.003968253968254233 * sp[17];
    A[135] = 0.04349267900155099 * sp[19] + -0.06243303921190619 * sp[18] + -0.02314932914598858 * sp[18] + 0.03507474113028568 * sp[17];
    A[136] = -0.07856742013183705 * sp[19] + 0.1360899955855054 * sp[18] + -0.009820927516479956 * sp[18] + 0.07014948226057126 * sp[17];
    A[137] = 0.1248660784238151 * sp[19] + -0.1283735525368424 * sp[18] + 0.01192541198429715 * sp[18] + -0.03507474113028569 * sp[17];
    A[138] = -0.07856742013183698 * sp[19] + -0.152925871328041 * sp[18] + 0.02665680325901709 * sp[18] + 0.04208968935634277 * sp[17];
    A[139] = 0.148716902392409 * sp[19] + 0.2946278254943947 * sp[18] + 0.002805979290422912 * sp[18];
    A[140] = -0.08979133729352919 * sp[19] + -0.1950155606843833 * sp[18] + -0.01543288609732566 * sp[18] + -0.04208968935634282 * sp[17];
    A[141] = -0.2062394778460755 * sp[19] + -0.09329881140655703 * sp[18] + 0.04700015311458264 * sp[18] + 0.0350747411302855 * sp[17];
    A[142] = 0.1346870059402923 * sp[19] + 0.06594051332493445 * sp[18] + -0.07997040977705108 * sp[18] + -0.07014948226057119 * sp[17];
    A[143] = -0.1641497884897317 * sp[19] + -0.09750778034219197 * sp[18] + -0.05822407027627441 * sp[18] + -0.03507474113028575 * sp[17];
    A[144] = 4.920634920634908 * sp[19] + 0.1984126984127017 * sp[18] + 0.1984126984127017 * sp[18] + 0.3968253968254028 * sp[17];
    A[145] = 0.02430049347996821 * sp[19] + -0.06075123369997158 * sp[18] + 0.2308546880599292 * sp[18] + 0.6075123369998047 * sp[17];
    A[146] = -0.5191061687282036 * sp[19] + -0.8067190459965528 * sp[18] + -0.3016427737204516 * sp[18] + -0.3507474113028568 * sp[17];
    A[147] = -0.1984126984127019 * sp[19] + 4.305555555555532 * sp[18] + 0.01984126984126967 * sp[18] + -0.1984126984127012 * sp[17];
    A[148] = -0.2187044413199089 * sp[19] + -0.03645074021998967 * sp[18] + 0.2551551815399183 * sp[18] + -0.2187044413199267 * sp[17];
    A[149] = -0.3507474113028569 * sp[19] + 0.5401510134063835 * sp[18] + 0.03507474113028512 * sp[18] + 0.3226876183986334 * sp[17];
    A[150] = 0.06529556615835218 * sp[19] + -0.1271545235715238 * sp[18] + -0.05154913117764576 * sp[18] + 0.06529556615835092 * sp[17];
    A[151] = -0.05326743555023475 * sp[19] + 0.1838585678669348 * sp[18] + -0.008591521862941607 * sp[18] + 0.08419691425682223 * sp[17];
    A[152] = -0.003436608745177672 * sp[19] + -0.0515491311776443 * sp[18] + -0.01718304372588151 * sp[18] + -0.003436608745176435 * sp[17];
    A[153] = -0.03522523963805745 * sp[19] + 0.02104922856420346 * sp[18] + 0.07947157723220408 * sp[18] + 0.1159855451497027 * sp[17];
    A[154] = -0.006873217490354695 * sp[19] + -0.1778445025628792 * sp[18] + -0.04725337024617508 * sp[18] + -0.1030982623552912 * sp[17];
    A[155] = -0.02663371777511703 * sp[19] + -0.007302793583500514 * sp[18] + -0.01073940232867678 * sp[18] + -0.01288728279441214 * sp[17];
    A[156] = 0.1314502845029977 * sp[19] + -0.01073940232867415 * sp[18] + 0.1576544261849667 * sp[18] + 0.1039574145415858 * sp[17];
    A[157] = 0.1030982623552918 * sp[19] + 0.1022391101689943 * sp[18] + -0.1520699369740541 * sp[18] + -0.1305911323167022 * sp[17];
    A[158] = -0.2345485468582884 * sp[19] + -0.167964252420494 * sp[18] + -0.06142938132002923 * sp[18] + -0.04209845712841164 * sp[17];
    A[159] = 0.02430049347996821 * sp[19] + 0.2308546880599292 * sp[18] + -0.06075123369997158 * sp[18] + 0.6075123369998047 * sp[17];
    A[160] = 5.41666666666671 * sp[19] + 0.4315476190476337 * sp[18] + 0.4315476190476337 * sp[18] + 1.130952380952397 * sp[17];
    A[161] = -0.1890134809847104 * sp[19] + -0.0687321749035231 * sp[18] + -0.2749286996141043 * sp[18] + -0.1890134809847002 * sp[17];
    A[162] = 0.1701034543599529 * sp[19] + 0.4495591293798418 * sp[18] + 0.1579532076199494 * sp[18] + -0.4131083891598566 * sp[17];
    A[163] = -0.4017857142857206 * sp[19] + 3.593749999999994 * sp[18] + 0.5580357142857225 * sp[18] + -0.4017857142857143 * sp[17];
    A[164] = 0.3007032652029462 * sp[19] + 0.1761261981902886 * sp[18] + 0.2792244605455826 * sp[18] + 0.3007032652029412 * sp[17];
    A[165] = -0.01686507936508175 * sp[19] + 0.07192460317460291 * sp[18] + -0.007440476190475829 * sp[18] + -0.01091269841269927 * sp[17];
    A[166] = -0.004960317460314048 * sp[19] + -0.1626984126984123 * sp[18] + 0.01984126984126912 * sp[18] + -0.1021825396825407 * sp[17];
    A[167] = 0.1001984126984115 * sp[19] + 0.1026785714285716 * sp[18] + -0.07192460317460353 * sp[18] + 0.1180555555555574 * sp[17];
    A[168] = -0.04513888888888788 * sp[19] + 0.005704365079364827 * sp[18] + 0.04340277777777819 * sp[18] + 0.05208333333333318 * sp[17];
    A[169] = 0.128968253968253 * sp[19] + -0.01636904761904674 * sp[18] + -0.09176587301587387 * sp[18] + -0.1785714285714302 * sp[17];
    A[170] = -0.03819444444444227 * sp[19] + 0.1054067460317487 * sp[18] + 0.03596230158730122 * sp[18] + 0.1264880952380961 * sp[17];
    A[171] = 0.1473214285714275 * sp[19] + 0.04935515873015912 * sp[18] + 0.1068948412698425 * sp[18] + 0.05605158730158834 * sp[17];
    A[172] = -0.1071428571428565 * sp[19] + -0.05605158730158752 * sp[18] + 0.01934523809523954 * sp[18] + 0.02182539682539773 * sp[17];
    A[173] = 0.221726190476191 * sp[19] + 0.1252480158730156 * sp[18] + 0.099454365079366 * sp[18] + 0.05109126984127012 * sp[17];
    A[174] = -0.5191061687282036 * sp[19] + -0.3016427737204516 * sp[18] + -0.8067190459965528 * sp[18] + -0.3507474113028568 * sp[17];
    A[175] = -0.1890134809847104 * sp[19] + -0.2749286996141043 * sp[18] + -0.0687321749035231 * sp[18] + -0.1890134809847002 * sp[17];
    A[176] = 5.555555555555568 * sp[19] + 0.5902777777777799 * sp[18] + 0.5902777777777799 * sp[18] + 0.9126984126984288 * sp[17];
    A[177] = -0.3507474113028577 * sp[19] + -0.3016427737204455 * sp[18] + 0.2034334985556576 * sp[18] + -0.01402989645209571 * sp[17];
    A[178] = 0.07732369676647738 * sp[19] + 0.1675346763273494 * sp[18] + 0.06443641397205674 * sp[18] + 0.07732369676647147 * sp[17];
    A[179] = -0.6200396825396939 * sp[19] + 3.395337301587295 * sp[18] + 0.3596230158730226 * sp[18] + -0.6200396825397001 * sp[17];
    A[180] = 0.03507474113028575 * sp[19] + -0.01192541198429715 * sp[18] + 0.1283735525368423 * sp[18] + -0.1248660784238147 * sp[17];
    A[181] = -0.07014948226057142 * sp[19] + 0.009820927516479927 * sp[18] + -0.1360899955855052 * sp[18] + 0.07856742013183712 * sp[17];
    A[182] = -0.03507474113028564 * sp[19] + 0.02314932914598861 * sp[18] + 0.06243303921190629 * sp[18] + -0.04349267900155099 * sp[17];
    A[183] = 0.03507474113028566 * sp[19] + 0.04700015311458283 * sp[18] + -0.09329881140655688 * sp[18] + -0.206239477846075 * sp[17];
    A[184] = -0.07014948226057138 * sp[19] + -0.07997040977705139 * sp[18] + 0.06594051332493439 * sp[18] + 0.1346870059402914 * sp[17];
    A[185] = -0.03507474113028568 * sp[19] + -0.05822407027627426 * sp[18] + -0.09750778034219171 * sp[18] + -0.1641497884897315 * sp[17];
    A[186] = 0.04208968935634285 * sp[19] + 0.02665680325901715 * sp[18] + -0.152925871328041 * sp[18] + -0.07856742013183672 * sp[17];
    A[187] = 0.002805979290422911 * sp[18] + 0.2946278254943947 * sp[18] + 0.1487169023924086 * sp[17];
    A[188] = -0.04208968935634283 * sp[19] + -0.01543288609732567 * sp[18] + -0.195015560684383 * sp[18] + -0.08979133729352909 * sp[17];
    A[189] = -0.1984126984127019 * sp[19] + 0.01984126984126967 * sp[18] + 4.305555555555532 * sp[18] + -0.1984126984127012 * sp[17];
    A[190] = 0.1701034543599529 * sp[19] + 0.1579532076199494 * sp[18] + 0.4495591293798418 * sp[18] + -0.4131083891598566 * sp[17];
    A[191] = -0.3507474113028577 * sp[19] + 0.2034334985556576 * sp[18] + -0.3016427737204455 * sp[18] + -0.01402989645209571 * sp[17];
    A[192] = 0.3968253968254036 * sp[19] + 0.198412698412702 * sp[18] + 0.198412698412702 * sp[18] + 4.920634920634906 * sp[17];
    A[193] = -0.1458029608799465 * sp[18] + -0.729014804399746 * sp[18] + -0.4374088826398538 * sp[17];
    A[194] = 0.7014948226057134 * sp[19] + 0.3507474113028561 * sp[18] + 0.3507474113028562 * sp[18] + 0.2805979290422558 * sp[17];
    A[195] = -0.1005208057964093 * sp[19] + 0.07088005536926223 * sp[18] + -0.06314768569261558 * sp[18] + -0.08505606644311368 * sp[17];
    A[196] = 0.04639421805988007 * sp[19] + -0.01288728279441046 * sp[18] + 0.04897167461876199 * sp[18] + 0.03092947870658588 * sp[17];
    A[197] = -0.02319710902993948 * sp[19] + 0.03221820698602831 * sp[18] + 0.001288728279440978 * sp[18] + -0.01804219591217489 * sp[17];
    A[198] = 0.1005208057964094 * sp[19] + 0.1714008611656716 * sp[18] + 0.03737312010379382 * sp[18] + 0.1933092419161691 * sp[17];
    A[199] = -0.04639421805988025 * sp[19] + -0.05928150085429055 * sp[18] + 0.002577456558881483 * sp[18] + -0.0412393049421147 * sp[17];
    A[200] = 0.02319710902993938 * sp[19] + 0.0554153160159676 * sp[18] + 0.02448583730938068 * sp[18] + 0.07474624020758425 * sp[17];
    A[201] = 0.1030982623552906 * sp[19] + 0.07732369676646855 * sp[18] + 0.01546473935329258 * sp[18] + -0.05670404429540892 * sp[17];
    A[202] = -0.2061965247105821 * sp[19] + -0.103098262355291 * sp[18] + -0.1030982623552908 * sp[18] + 0.1082531754730536 * sp[17];
    A[203] = 0.1030982623552905 * sp[19] + 0.02577456558882192 * sp[18] + 0.08763352300199814 * sp[18] + -0.04639421805987948 * sp[17];
    A[204] = -0.2187044413199089 * sp[19] + 0.2551551815399183 * sp[18] + -0.03645074021998967 * sp[18] + -0.2187044413199267 * sp[17];
    A[205] = -0.4017857142857206 * sp[19] + 0.5580357142857225 * sp[18] + 3.593749999999994 * sp[18] + -0.4017857142857143 * sp[17];
    A[206] = 0.07732369676647738 * sp[19] + 0.06443641397205674 * sp[18] + 0.1675346763273494 * sp[18] + 0.07732369676647147 * sp[17];
    A[207] = -0.729014804399746 * sp[18] + -0.1458029608799465 * sp[18] + -0.4374088826398538 * sp[17];
    A[208] = 0.8035714285714415 * sp[19] + 0.4017857142857216 * sp[18] + 0.4017857142857216 * sp[18] + 5.357142857142866 * sp[17];
    A[209] = -0.05154913117763475 * sp[18] + -0.2577456558882181 * sp[18] + -0.1546473935329283 * sp[17];
    A[210] = 0.06200396825396927 * sp[19] + -0.02108134920634938 * sp[18] + 0.09598214285714152 * sp[18] + 0.05307539682539863 * sp[17];
    A[211] = -0.1240079365079386 * sp[19] + 0.01736111111111117 * sp[18] + -0.2405753968253958 * sp[18] + 0.04365079365079513 * sp[17];
    A[212] = -0.06200396825396921 * sp[19] + 0.04092261904761985 * sp[18] + 0.1460813492063474 * sp[18] + -0.06498015873016053 * sp[17];
    A[213] = 0.0620039682539693 * sp[19] + 0.083085317460319 * sp[18] + -0.03397817460317261 * sp[18] + 0.04017857142857451 * sp[17];
    A[214] = -0.1240079365079386 * sp[19] + -0.1413690476190499 * sp[18] + 0.1165674603174577 * sp[18] + 0.1428571428571431 * sp[17];
    A[215] = -0.06200396825396926 * sp[19] + -0.102926587301589 * sp[18] + -0.2080853174603165 * sp[18] + -0.3139880952380974 * sp[17];
    A[216] = 0.07440476190476326 * sp[19] + 0.04712301587301679 * sp[18] + 0.01537698412698324 * sp[18] + -0.00793650793650792 * sp[17];
    A[217] = 0.00496031746031742 * sp[18] + -0.1458333333333373 * sp[18] + -0.07043650793651063 * sp[17];
    A[218] = -0.07440476190476293 * sp[19] + -0.0272817460317463 * sp[18] + -0.05902777777777945 * sp[18] + -0.003968253968254233 * sp[17];
    A[219] = -0.3507474113028569 * sp[19] + 0.03507474113028512 * sp[18] + 0.5401510134063835 * sp[18] + 0.3226876183986334 * sp[17];
    A[220] = 0.3007032652029462 * sp[19] + 0.2792244605455826 * sp[18] + 0.1761261981902886 * sp[18] + 0.3007032652029412 * sp[17];
    A[221] = -0.6200396825396939 * sp[19] + 0.3596230158730226 * sp[18] + 3.395337301587295 * sp[18] + -0.6200396825397001 * sp[17];
    A[222] = 0.7014948226057134 * sp[19] + 0.3507474113028562 * sp[18] + 0.3507474113028561 * sp[18] + 0.2805979290422558 * sp[17];
    A[223] = -0.2577456558882181 * sp[18] + -0.05154913117763475 * sp[18] + -0.1546473935329283 * sp[17];
    A[224] = 1.240079365079385 * sp[19] + 0.620039682539692 * sp[18] + 0.620039682539692 * sp[18] + 5.615079365079414 * sp[17];
  }

};


class forms_form_0: public ufc::form
{
public:

  forms_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~forms_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "f7ade342237e5af4964c4356cf0b121fecb7c546c2c72d54a3d7f9c3718a8755a939353c4e59adb32539a005c2463fb5e8af82bc1aadd81f9dfdc51a48bee4cd";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new forms_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new forms_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_finite_element_2();
    case 1:
        return new forms_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_dofmap_2();
    case 1:
        return new forms_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new forms_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class forms_form_1: public ufc::form
{
public:

  forms_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~forms_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "a3226853386d2b74b50fbefb85d9e0f4f839379042f756b24439e8ccc90d14f112726c9f00229d697576706f783f14fe1fb718aff5c3d4d48b40494a4aef7b2b";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new forms_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new forms_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_finite_element_2();
    case 1:
        return new forms_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_dofmap_2();
    case 1:
        return new forms_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new forms_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace Forms
{

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const forms_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_L_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const forms_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_FunctionSpace_1 TrialSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_FunctionSpace_1 TrialSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

// Class typedefs
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
